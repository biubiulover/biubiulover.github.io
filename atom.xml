<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BiuBiu</title>
  
  <subtitle>GOOD IS GOOD, BUT BETTER CARRIES IT.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gnbyj.cn/"/>
  <updated>2019-04-02T03:16:22.301Z</updated>
  <id>http://gnbyj.cn/</id>
  
  <author>
    <name>Gavin Gao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Yarn命令</title>
    <link href="http://gnbyj.cn/2019/04/02/%5B2019-04-02%5DYarn%E5%91%BD%E4%BB%A4/"/>
    <id>http://gnbyj.cn/2019/04/02/[2019-04-02]Yarn命令/</id>
    <published>2019-04-01T16:00:00.000Z</published>
    <updated>2019-04-02T03:16:22.301Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装yarn"><a href="#安装yarn" class="headerlink" title="安装yarn"></a>安装yarn</h2><p>推荐：下载对应系统的<a href="https://yarnpkg.com/en/docs/install#windows-stable" target="_blank" rel="noopener">安装包</a></p><h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><p><code>yarn --version</code></p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p><code>yarn init</code></p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>单包</p><p><code>yarn add jquery</code></p><p>多个包</p><p><code>yarn add bootstrap zepto</code></p><p>指定版本</p><p><code>yarn add jquery@2.1.4</code></p><h2 id="更新包"><a href="#更新包" class="headerlink" title="更新包"></a>更新包</h2><p>至指定版本</p><p><code>yarn upgrade jquery@3.0.0</code></p><p>至最新版本</p><p><code>yarn upgrade --latest jquery</code></p><h2 id="删除包"><a href="#删除包" class="headerlink" title="删除包"></a>删除包</h2><p><code>yarn remove jquery</code></p><p><code>yarn remove bootstrap zepto</code></p><h2 id="yarn-npm-对比"><a href="#yarn-npm-对比" class="headerlink" title="yarn npm 对比"></a>yarn npm 对比</h2><table><thead><tr><th>yarn</th><th>npm</th><th>说明</th></tr></thead><tbody><tr><td>yarn init</td><td>npm init</td><td>初始化某个项目</td></tr><tr><td>yarn install/link</td><td>npm install/link</td><td>默认的安装依赖操作</td></tr><tr><td>yarn add taco</td><td>npm install taco –save</td><td>安装依赖</td></tr><tr><td>yarn remove taco</td><td>npm uninstall taco –save</td><td>移除某个依赖</td></tr><tr><td>yarn upgrade taco</td><td>npm update taco –save</td><td>更新依赖</td></tr><tr><td>yarn global add taco</td><td>npm install taco –global</td><td>全局安装依赖</td></tr><tr><td>yarn run/test</td><td>npm run/test</td><td>运行命令</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装yarn&quot;&gt;&lt;a href=&quot;#安装yarn&quot; class=&quot;headerlink&quot; title=&quot;安装yarn&quot;&gt;&lt;/a&gt;安装yarn&lt;/h2&gt;&lt;p&gt;推荐：下载对应系统的&lt;a href=&quot;https://yarnpkg.com/en/docs/install
      
    
    </summary>
    
      <category term="web" scheme="http://gnbyj.cn/categories/web/"/>
    
    
      <category term="yarn" scheme="http://gnbyj.cn/tags/yarn/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装jdk</title>
    <link href="http://gnbyj.cn/2019/03/13/%5B2019-03-13%5DCentOS7%E5%AE%89%E8%A3%85JDK/"/>
    <id>http://gnbyj.cn/2019/03/13/[2019-03-13]CentOS7安装JDK/</id>
    <published>2019-03-13T15:40:00.000Z</published>
    <updated>2019-03-13T16:17:48.779Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>下载jdk压缩包</p><blockquote><p><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p></blockquote></li><li><p>删除原有OpenJDK</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//如果操作系统不是最小安装，会默认安装openjdk</span><br><span class="line"><span class="comment">#rpm -qa | grep java</span></span><br><span class="line">//删除系统预装jdk，可以一条命令直接删除</span><br><span class="line"><span class="comment">#rpm -e --nodeps `rpm -qa | grep java`</span></span><br></pre></td></tr></table></figure></li><li><p>通过FTP上传jdk压缩包至根目录<code>root</code>下</p></li><li><p>复制压缩包到自定义文件夹下并解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp jdk-8u201-linux-x64.tar.gz  /usr/java</span><br><span class="line"><span class="built_in">cd</span> /usr/java</span><br><span class="line">tar -zxvf jdk-8u201-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>配置环境变量 <code>vim /etc/profile</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#set java environment</span><br><span class="line">JAVA_HOME=/usr/java/jdk1.8.0_201</span><br><span class="line">JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">export JAVA_HOME JRE_HOME PATH CLASSPATH</span><br></pre></td></tr></table></figure></li><li><p>使配置文件生效<code>source /etc/profile</code></p></li><li><p><code>java -version</code>查看是否生效</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载jdk压缩包&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot; targ
      
    
    </summary>
    
      <category term="Java" scheme="http://gnbyj.cn/categories/Java/"/>
    
    
      <category term="CentOS" scheme="http://gnbyj.cn/tags/CentOS/"/>
    
      <category term="jdk" scheme="http://gnbyj.cn/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装tomcat</title>
    <link href="http://gnbyj.cn/2019/03/11/%5B2019-03-11%5DCentOS7%E5%AE%89%E8%A3%85tomcat/"/>
    <id>http://gnbyj.cn/2019/03/11/[2019-03-11]CentOS7安装tomcat/</id>
    <published>2019-03-11T07:40:00.000Z</published>
    <updated>2019-03-14T02:21:29.969Z</updated>
    
    <content type="html"><![CDATA[<p>对于一个新安装的 centos 系统来说，是没有tomcat服务器的。 </p><h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl status tomcat.service</span><br><span class="line">//或者 </span><br><span class="line">systemctl status tomcat</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="1-用-yum-来安装-tomcat"><a href="#1-用-yum-来安装-tomcat" class="headerlink" title="1. 用 yum 来安装 tomcat"></a>1. 用 <code>yum</code> 来安装 <code>tomcat</code></h3><p>命令 <code>-y</code> 代表遇到询问都选 <code>y</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install tomcat</span><br><span class="line">//或者</span><br><span class="line">yum -y install tomcat</span><br></pre></td></tr></table></figure><p>安装目录在 <code>&quot;/usr/share/tomcat&quot;</code> </p><p><code>systemctl status tomcat</code> 命令查看一下 <code>tomcat</code> 的状态</p><h3 id="2-运行tomcat"><a href="#2-运行tomcat" class="headerlink" title="2. 运行tomcat"></a>2. 运行tomcat</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start tomcat.service</span><br><span class="line">//或者 </span><br><span class="line">systemctl start tomcat</span><br></pre></td></tr></table></figure><p>虽然正常启动了，但是还不能访问，webapps目录下是空的。 </p><h4 id="安装管理界面"><a href="#安装管理界面" class="headerlink" title="安装管理界面"></a>安装管理界面</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install tomcat-webapps tomcat-admin-webapps</span><br></pre></td></tr></table></figure><p>用浏览器访问<code>服务器ip:8080</code></p><h4 id="停止tomcat服务"><a href="#停止tomcat服务" class="headerlink" title="停止tomcat服务"></a>停止<code>tomcat</code>服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop tomcat.service</span><br><span class="line">//或者 </span><br><span class="line">systemctl stop tomcat</span><br></pre></td></tr></table></figure><h4 id="重启-tomcat-服务"><a href="#重启-tomcat-服务" class="headerlink" title="重启 tomcat 服务"></a>重启 <code>tomcat</code> 服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart tomcat.service</span><br><span class="line">//或者 </span><br><span class="line">systemctl restart tomcat</span><br></pre></td></tr></table></figure><h4 id="开机启动-tomcat"><a href="#开机启动-tomcat" class="headerlink" title="开机启动 tomcat"></a>开机启动 <code>tomcat</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable tomcat</span><br></pre></td></tr></table></figure><h4 id="卸载tomcat"><a href="#卸载tomcat" class="headerlink" title="卸载tomcat"></a>卸载tomcat</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y remove tomcat*</span><br><span class="line">// 寻找tomcat</span><br><span class="line">rpm -qa | grep tomcat</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于一个新安装的 centos 系统来说，是没有tomcat服务器的。 &lt;/p&gt;
&lt;h3 id=&quot;查看状态&quot;&gt;&lt;a href=&quot;#查看状态&quot; class=&quot;headerlink&quot; title=&quot;查看状态&quot;&gt;&lt;/a&gt;查看状态&lt;/h3&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
      <category term="Java" scheme="http://gnbyj.cn/categories/Java/"/>
    
    
      <category term="CentOS" scheme="http://gnbyj.cn/tags/CentOS/"/>
    
      <category term="tomcat" scheme="http://gnbyj.cn/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装MySQL</title>
    <link href="http://gnbyj.cn/2019/03/11/%5B2019-03-11%5DCentOS7%E5%AE%89%E8%A3%85MySQL/"/>
    <id>http://gnbyj.cn/2019/03/11/[2019-03-11]CentOS7安装MySQL/</id>
    <published>2019-03-11T05:40:00.000Z</published>
    <updated>2019-03-11T06:23:19.904Z</updated>
    
    <content type="html"><![CDATA[<p>在CentOS中默认安装有MariaDB，这个是MySQL的分支。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="1-下载并安装MySQL官方的-Yum-Repository"><a href="#1-下载并安装MySQL官方的-Yum-Repository" class="headerlink" title="1. 下载并安装MySQL官方的 Yum Repository"></a>1. 下载并安装MySQL官方的 <a href="https://www.baidu.com/s?wd=Yum&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="noopener">Yum</a> Repository</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span></span><br></pre></td></tr></table></figure><h3 id="2-直接yum安装"><a href="#2-直接yum安装" class="headerlink" title="2. 直接yum安装"></a>2. 直接yum安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum -y install mysql57-community-release-el7-10.noarch.rpm</span></span><br></pre></td></tr></table></figure><h3 id="3-安装MySQL服务器"><a href="#3-安装MySQL服务器" class="headerlink" title="3. 安装MySQL服务器"></a>3. 安装MySQL服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum -y install mysql-community-server</span></span><br></pre></td></tr></table></figure><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><h3 id="1-启动MySQL"><a href="#1-启动MySQL" class="headerlink" title="1. 启动MySQL"></a>1. 启动MySQL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl start  mysqld.service</span></span><br></pre></td></tr></table></figure><h3 id="2-查看运行状态"><a href="#2-查看运行状态" class="headerlink" title="2. 查看运行状态"></a>2. 查看运行状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl status mysqld.service</span></span><br></pre></td></tr></table></figure><h3 id="3-此时MySQL已经开始正常运行，不过要想进入MySQL还得先找出此时root用户的密码"><a href="#3-此时MySQL已经开始正常运行，不过要想进入MySQL还得先找出此时root用户的密码" class="headerlink" title="3. 此时MySQL已经开始正常运行，不过要想进入MySQL还得先找出此时root用户的密码"></a>3. 此时MySQL已经开始正常运行，不过要想进入MySQL还得先找出此时root用户的密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># grep "password" /var/log/mysqld.log</span></span><br><span class="line">// [Note] A temporary password is generated <span class="keyword">for</span> root@localhost: no+e!5//alfg</span><br></pre></td></tr></table></figure><h3 id="4-进入数据库，输入初始密码"><a href="#4-进入数据库，输入初始密码" class="headerlink" title="4. 进入数据库，输入初始密码"></a>4. 进入数据库，输入初始密码</h3><p>此时不能做任何事情，因为MySQL默认必须修改密码之后才能操作数据库 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysql -uroot -p no+e!5//alfg</span></span><br></pre></td></tr></table></figure><h3 id="5-修改初始密码"><a href="#5-修改初始密码" class="headerlink" title="5. 修改初始密码"></a>5. 修改初始密码</h3><p>密码设置必须要大小写字母数字和特殊符号（,/‘;:等）,不然不能配置成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;你要设置的密码&apos;;</span><br></pre></td></tr></table></figure><h3 id="6-开启mysql远程访问"><a href="#6-开启mysql远程访问" class="headerlink" title="6. 开启mysql远程访问"></a>6. 开启mysql远程访问</h3><p>下面命令开启的IP是 192.168.0.1，如要开启所有的，用%代替IP </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant all privileges on *.* to &apos;root&apos;@&apos;192.168.0.1&apos; identified by &apos;你设置的密码&apos; with grant option;</span><br><span class="line">mysql&gt; flush privileges; </span><br><span class="line">mysql&gt; exit</span><br></pre></td></tr></table></figure><h3 id="7-为firewalld添加开放端口"><a href="#7-为firewalld添加开放端口" class="headerlink" title="7. 为firewalld添加开放端口"></a>7. 为firewalld添加开放端口</h3><p>查看firewalld状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl status firewalld</span></span><br></pre></td></tr></table></figure><p>开启/关闭防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl start firewalld</span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl stop firewalld</span></span><br></pre></td></tr></table></figure><p>添加mysql端口3306和Tomcat端口8080</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># firewall-cmd --zone=public --add-port=3306/tcp --permanent</span></span><br><span class="line">[root@localhost ~]<span class="comment"># firewall-cmd --zone=public --add-port=8080/tcp --permanent</span></span><br></pre></td></tr></table></figure><p>重新载入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># firewall-cmd --reload</span></span><br></pre></td></tr></table></figure><h3 id="8-更改mysql的语言"><a href="#8-更改mysql的语言" class="headerlink" title="8. 更改mysql的语言"></a>8. 更改mysql的语言</h3><blockquote><p>可以先查看mysql字符集，使用<code>status</code>命令，<code>Server characterset</code></p></blockquote><p>在bash环境下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure><p>进入文件，新增4行(<code>insert</code>)，保存(<code>:wq</code>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">...</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br></pre></td></tr></table></figure><h3 id="9-重启mysql"><a href="#9-重启mysql" class="headerlink" title="9. 重启mysql"></a>9. 重启mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># service mysqld restart</span></span><br></pre></td></tr></table></figure><h3 id="10-查看字符集"><a href="#10-查看字符集" class="headerlink" title="10. 查看字符集"></a>10. 查看字符集</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysql -uroot -p密码</span></span><br><span class="line">mysql&gt; status</span><br></pre></td></tr></table></figure><h3 id="11-Windows下用cmd远程操作数据库"><a href="#11-Windows下用cmd远程操作数据库" class="headerlink" title="11. Windows下用cmd远程操作数据库"></a>11. Windows下用cmd远程操作数据库</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 远程服务器ip -P <span class="number">3306</span> -u root -p mysql密码</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在CentOS中默认安装有MariaDB，这个是MySQL的分支。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;h3 id=&quot;1-下载并安装MySQL官方的-Yum-Repo
      
    
    </summary>
    
      <category term="Java" scheme="http://gnbyj.cn/categories/Java/"/>
    
    
      <category term="CentOS" scheme="http://gnbyj.cn/tags/CentOS/"/>
    
      <category term="mysql" scheme="http://gnbyj.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Git 常用命令</title>
    <link href="http://gnbyj.cn/2019/03/09/%5B2019-03-09%5DGitHelp/"/>
    <id>http://gnbyj.cn/2019/03/09/[2019-03-09]GitHelp/</id>
    <published>2019-03-09T09:10:00.000Z</published>
    <updated>2019-03-10T04:13:26.658Z</updated>
    
    <content type="html"><![CDATA[<h4 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h4><pre><code># 在当前目录新建一个Git代码库$ git init# 新建一个目录，将其初始化为Git代码库$ git init [project-name]# 下载一个项目和它的整个代码历史$ git clone [url]</code></pre><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><pre><code># 显示当前的Git配置$ git config --list# 编辑Git配置文件$ git config -e [--global]# 设置提交代码时的用户信息$ git config [--global] user.name &quot;[name]&quot;$ git config [--global] user.email &quot;[email address]&quot;</code></pre><h4 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h4><pre><code># 添加指定文件到暂存区$ git add [file1] [file2] ...# 添加指定目录到暂存区，包括子目录$ git add [dir]# 添加当前目录的所有文件到暂存区$ git add .# 添加每个变化前，都会要求确认# 对于同一个文件的多处变化，可以实现分次提交$ git add -p# 删除工作区文件，并且将这次删除放入暂存区$ git rm [file1] [file2] ...# 停止追踪指定文件，但该文件会保留在工作区$ git rm --cached [file]# 改名文件，并且将这个改名放入暂存区$ git mv [file-original] [file-renamed]</code></pre><h4 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h4><pre><code># 提交暂存区到仓库区$ git commit -m [message]# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ...</code></pre><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><pre><code># 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch]</code></pre><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><pre><code># 列出所有tag$ git tag# 新建一个tag在当前commit$ git tag [tag]# 新建一个tag在指定commit$ git tag [tag] [commit]# 删除本地tag$ git tag -d [tag]# 删除远程tag$ git push origin :refs/tags/[tagName]# 查看tag信息$ git show [tag]# 提交指定tag$ git push [remote] [tag]# 提交所有tag$ git push [remote] --tags# 新建一个分支，指向某个tag$ git checkout -b [branch] [tag]</code></pre><h4 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h4><pre><code># 显示有变更的文件$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat &quot;@{0 day ago}&quot;# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog</code></pre><h4 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h4><pre><code># 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all</code></pre><h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><pre><code># 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;仓库&quot;&gt;&lt;a href=&quot;#仓库&quot; class=&quot;headerlink&quot; title=&quot;仓库&quot;&gt;&lt;/a&gt;仓库&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;# 在当前目录新建一个Git代码库
$ git init

# 新建一个目录，将其初始化为Git代码库
$ git init
      
    
    </summary>
    
      <category term="tools" scheme="http://gnbyj.cn/categories/tools/"/>
    
    
      <category term="git" scheme="http://gnbyj.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="http://gnbyj.cn/2019/03/03/%5B2019-03-03%5Dgit/"/>
    <id>http://gnbyj.cn/2019/03/03/[2019-03-03]git/</id>
    <published>2019-03-03T04:10:00.000Z</published>
    <updated>2019-04-02T03:19:35.689Z</updated>
    
    <content type="html"><![CDATA[<ol><li>在github新建库，github -&gt; new repository</li><li>copy [SSH]</li><li>本地代码根目录下，在bash中<code>git init</code>，初始化</li><li><code>vim .gitignore</code> 新增以及编写这个文件 <code>node_modules/</code></li><li><code>git add .</code> 将代码添加本地仓库</li><li><code>git commit -m &#39;first commit&#39;</code> 提交到本地仓库</li><li><code>git remote add origin [SSH]</code> 与远程地址关联</li><li><code>git push -u origin master</code> 提交到远程仓库master分支</li></ol><hr><p>撤销操作</p><p><code>git status</code> 查看add的文件</p><p><code>git reset HEAD</code> 上一次add里面的全部撤销</p><p><code>git reset HEAD [file]</code> 对某个文件进行撤销</p><p>如果只是执行了add操作，此时还没有提交，所以不存在HEAD版本，不能使用 <code>git reset HEAD</code>命令。</p><p>使用<code>git rm -r --cached .</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;在github新建库，github -&amp;gt; new repository&lt;/li&gt;
&lt;li&gt;copy [SSH]&lt;/li&gt;
&lt;li&gt;本地代码根目录下，在bash中&lt;code&gt;git init&lt;/code&gt;，初始化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vim .gi
      
    
    </summary>
    
      <category term="tools" scheme="http://gnbyj.cn/categories/tools/"/>
    
    
      <category term="git" scheme="http://gnbyj.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>codewars刷题</title>
    <link href="http://gnbyj.cn/2019/03/02/%5B2019-03-02%5Dcodewars/"/>
    <id>http://gnbyj.cn/2019/03/02/[2019-03-02]codewars/</id>
    <published>2019-03-02T03:10:00.000Z</published>
    <updated>2019-03-13T14:38:13.765Z</updated>
    
    <content type="html"><![CDATA[<ol><li><blockquote><p>Trolls are attacking your comment section!</p><p>A common way to deal with this situation is to remove all of the vowels from the trolls’ comments, neutralizing the threat.</p><p>Your task is to write a function that takes a string and return a new string with all vowels removed.</p><p>For example, the string “This website is for losers LOL!” would become “Ths wbst s fr lsrs LL!”.</p><p>Note: for this kata <code>y</code> isn’t considered a vowel.</p></blockquote></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// my solution</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disemvowel</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> nstr = <span class="string">''</span>;</span><br><span class="line">  str.split(<span class="string">''</span>).forEach(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> chr = x.toLowerCase();</span><br><span class="line">    <span class="keyword">if</span> (chr === <span class="string">'a'</span> || chr === <span class="string">'e'</span> || chr === <span class="string">'i'</span> || chr === <span class="string">'o'</span> || chr === <span class="string">'u'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    nstr += x;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> nstr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best practice</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disemvowel</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/[aeiou]/gi</span>, <span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">disemvowel = <span class="function"><span class="params">str</span> =&gt;</span> str.replace(<span class="regexp">/[aeiou]/gi</span>, <span class="string">''</span>);</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disemvowel</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> vowels = [<span class="string">'a'</span>,<span class="string">'e'</span>,<span class="string">'i'</span>,<span class="string">'o'</span>,<span class="string">'u'</span>];</span><br><span class="line">    <span class="keyword">return</span> str.split(<span class="string">''</span>).filter(<span class="function"><span class="params">chr</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> vowels.indexOf(chr.toLowerCase()) == <span class="number">-1</span>;</span><br><span class="line">    &#125;).join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="keyword">const</span> vowels = <span class="string">'aeiou'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disemvowel</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.split(<span class="string">''</span>)</span><br><span class="line">    .filter(<span class="function"><span class="params">letter</span> =&gt;</span> !vowels.includes(letter.toLowerCase()))</span><br><span class="line">    .join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">disemvowel</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> vowels = [<span class="string">'a'</span>,<span class="string">'e'</span>,<span class="string">'i'</span>,<span class="string">'o'</span>,<span class="string">'u'</span>,<span class="string">'A'</span>,<span class="string">'E'</span>,<span class="string">'I'</span>,<span class="string">'O'</span>,<span class="string">'U'</span>];</span><br><span class="line">    vowels.map(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(v, <span class="string">'g'</span>);</span><br><span class="line">        str = str.replace(reg, <span class="string">''</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><blockquote><p>Your task is to make a function that can take any non-negative integer as a argument and return it with its digits in descending order. Essentially, rearrange the digits to create the highest possible number.</p><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples:"></a>Examples:</h3><p>Input: <code>21445</code> Output: <code>54421</code></p><p>Input: <code>145263</code> Output: <code>654321</code></p><p>Input: <code>1254859723</code> Output: <code>9875543221</code></p></blockquote></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">descendingOrder</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(<span class="built_in">String</span>(n).split(<span class="string">''</span>).sort().reverse().join(<span class="string">''</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">descendingOrder</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(n.toString().split(<span class="string">''</span>).sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b - a;</span><br><span class="line">  &#125;).join(<span class="string">''</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">descendingOrder</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(n.toString().split(<span class="string">''</span>).sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a).join(<span class="string">''</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><blockquote><p>Timmy spends a lot of time talking on the phone and he would like to see which friends he talks to the most. <strong>TASK:</strong> Complete the function <code>closestFriends</code> that takes an array <code>history</code> as input. Each element of history is a string in the following format <code>&quot;(000) 000-0000 00:00:00&quot;</code> (where the first part <code>&quot;(000) 000-0000&quot;</code> represents the phone number Timmy talked to and the second <code>&quot;00:00:00&quot;</code> is the call duration <code>(hours : minutes : seconds)</code>. Your job is to find the three contacts Timmy talked to the most and return their names in an array sorted by total call durations. A global variable <code>phonebook</code> is preloaded and contains all the contacts and their phone numbers. </p></blockquote></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> phonebook = &#123;</span><br><span class="line">     <span class="string">'John'</span> : <span class="string">'(555) 010-3535'</span>,</span><br><span class="line">    <span class="string">'Melissa'</span> : <span class="string">'(442) 130-5165'</span>,</span><br><span class="line">  <span class="string">'Jack'</span> : <span class="string">'(333) 010-5135'</span></span><br><span class="line">    <span class="comment">//and so on...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> history = [<span class="string">"(555) 010-3535 00:13:24"</span>, <span class="string">"(442) 130-5165 01:36:26"</span>,</span><br><span class="line"><span class="string">"(333) 010-5135 01:38:24"</span>];</span><br><span class="line">closestFriends(history)  <span class="comment">// should return ['Jack','Melissa','John'];</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">closestFriends</span>(<span class="params">history</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> tempHist = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> history) &#123;</span><br><span class="line">    <span class="keyword">const</span> arr = item.split(<span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">const</span> phone = arr[<span class="number">0</span>] + <span class="string">' '</span> + arr[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> totalSec = covertTime(arr[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">true</span></span><br><span class="line">    tempHist.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(item.tel === phone)&#123;</span><br><span class="line">item[<span class="string">'time'</span>] += totalSec</span><br><span class="line">flag = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123; <span class="comment">// 不存在此人记录</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> name <span class="keyword">in</span> phonebook) &#123;</span><br><span class="line">      <span class="keyword">if</span> (phonebook[name] === phone) &#123;</span><br><span class="line">        tempHist.push(&#123;<span class="string">'tel'</span>:phone, <span class="string">'name'</span>:name, <span class="string">'time'</span>: totalSec&#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> arr = []</span><br><span class="line">  tempHist.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> b[<span class="string">'time'</span>]-a[<span class="string">'time'</span>])</span><br><span class="line">  tempHist.forEach(<span class="function"><span class="params">item</span> =&gt;</span> arr.push(item[<span class="string">'name'</span>]))</span><br><span class="line">  <span class="keyword">return</span> arr.slice(<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">covertTime</span>(<span class="params">hmm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = hmm.split(<span class="string">':'</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Number</span>(arr[<span class="number">0</span>])*<span class="number">60</span>*<span class="number">60</span> + <span class="built_in">Number</span>(arr[<span class="number">1</span>])*<span class="number">60</span> + <span class="built_in">Number</span>(arr[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><blockquote><p>Write a function that takes in a string of one or more words, and returns the same string, but with all five or more letter words reversed (Just like the name of this Kata). Strings passed in will consist of only letters and spaces. Spaces will be included only when more than one word is present.</p><p>Examples:</p><p><code>spinWords( &quot;Hey fellow warriors&quot; )</code> =&gt; returns “Hey wollef sroirraw”<br><code>spinWords( &quot;This is a test&quot;)</code> =&gt; returns “This is a test”<br><code>spinWords( &quot;This is another test&quot; )</code>=&gt; returns “This is rehtona test”</p></blockquote></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spinWords</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> array = [];</span><br><span class="line">  str.split(<span class="string">' '</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    item.length&gt;<span class="number">4</span> ? array.push(item.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)) : array.push(item)</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> array.join(<span class="string">' '</span>).trim();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spinWords</span>(<span class="params">string</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> string.replace(<span class="regexp">/\w&#123;5,&#125;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">w</span>) </span>&#123; <span class="keyword">return</span> w.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>) &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">spinWords</span>(<span class="params">words</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> words.split(<span class="string">' '</span>).map(<span class="function"><span class="keyword">function</span> (<span class="params">word</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (word.length &gt; <span class="number">4</span>) ? word.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>) : word;</span><br><span class="line">  &#125;).join(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><blockquote><h5 id="Description"><a href="#Description" class="headerlink" title="Description:"></a>Description:</h5><p>Implement the function unique_in_order which takes as argument a sequence and returns a list of items without any elements with the same value next to each other and preserving the original order of elements.</p><p>For example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; uniqueInOrder(&apos;AAAABBBCCDAABBB&apos;) == [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;D&apos;, &apos;A&apos;, &apos;B&apos;]</span><br><span class="line">&gt; uniqueInOrder(&apos;ABBCcAD&apos;)         == [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;, &apos;c&apos;, &apos;A&apos;, &apos;D&apos;]</span><br><span class="line">&gt; uniqueInOrder([1,2,2,3,3])       == [1,2,3]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> uniqueInOrder = <span class="function"><span class="keyword">function</span> (<span class="params">iterable</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [].filter.call(iterable, (<span class="function"><span class="keyword">function</span> (<span class="params">a, i</span>) </span>&#123; <span class="keyword">return</span> iterable[i - <span class="number">1</span>] !== a &#125;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">var</span> uniqueInOrder = <span class="function"><span class="keyword">function</span>(<span class="params">iterable</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [...iterable].filter(<span class="function">(<span class="params">a, i</span>) =&gt;</span> a !== iterable[i<span class="number">-1</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="keyword">var</span> uniqueInOrder=<span class="function"><span class="keyword">function</span>(<span class="params">iterable</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.reduce.call(iterable, <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>) </span>&#123; <span class="keyword">if</span> (a[a.length<span class="number">-1</span>] !== b) a.push(b); <span class="keyword">return</span> a; &#125;, []);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="keyword">const</span> uniqueInOrder = <span class="function"><span class="params">d</span> =&gt;</span> [...d].filter(<span class="function">(<span class="params">x, i, a</span>) =&gt;</span> x != a[i + <span class="number">1</span>])</span><br></pre></td></tr></table></figure><ol start="6"><li><blockquote><p>solution(‘abc’) // should return [‘ab’, ‘c_’] </p><p>solution(‘abcdef’) // should return [‘ab’, ‘cd’, ‘ef’] </p></blockquote></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (str.length % <span class="number">2</span> ? str + <span class="string">'_'</span> : str).match(<span class="regexp">/../g</span>); <span class="comment">// 0-false,1-true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">solution=<span class="function"><span class="params">str</span>=&gt;</span>(str+<span class="string">'_'</span>).match(<span class="regexp">/../g</span>)</span><br><span class="line"><span class="comment">// 自己的反例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="function">(<span class="params">str.length%<span class="number">2</span>===<span class="number">0</span> ? str : str+<span class="string">"_"</span></span>).<span class="params">split</span>(<span class="params"><span class="string">''</span></span>).<span class="params">map</span>(<span class="params">(item,index</span>) =&gt;</span> index%<span class="number">2</span>===<span class="number">1</span>?item+<span class="string">" "</span>:item).join(<span class="string">''</span>).trim().split(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li><blockquote><p>toCamelCase(“the-stealth-warrior”) // returns “theStealthWarrior” toCamelCase(“The_Stealth_Warrior”) // returns “TheStealthWarrior” </p></blockquote></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自己答案</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toCamelCase</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/[^0-9A-Za-z]./g</span>, (w)=&gt;w.slice(<span class="number">1</span>).toUpperCase());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toCamelCase</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">var</span> regExp=<span class="regexp">/[-_]\w/ig</span>;</span><br><span class="line">     <span class="keyword">return</span> str.replace(regExp,<span class="function"><span class="keyword">function</span>(<span class="params">match</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> match.charAt(<span class="number">1</span>).toUpperCase();</span><br><span class="line">     &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toCamelCase</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/[-_](.)/g</span>, (_, c) =&gt; c.toUpperCase());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li><blockquote></blockquote></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">digital_root</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(n &gt; <span class="number">10</span>)&#123;</span><br><span class="line">    n = <span class="built_in">String</span>(n).split(<span class="string">''</span>).reduce(<span class="function">(<span class="params">x,y</span>)=&gt;</span><span class="built_in">Number</span>(x)+<span class="built_in">Number</span>(y));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li><blockquote><h5 id="Description-1"><a href="#Description-1" class="headerlink" title="Description:"></a>Description:</h5><p>Given a string of words, you need to find the highest scoring word.</p><p>Each letter of a word scores points according to it’s position in the alphabet: <code>a = 1, b = 2, c = 3</code> etc.</p><p>You need to return the highest scoring word as a string.</p><p>If two words score the same, return the word that appears earliest in the original string.</p><p>All letters will be lowercase and all inputs will be valid.</p></blockquote></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">high</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//transform the input string into array &amp; define a string of alphabetical latin characters</span></span><br><span class="line">  <span class="keyword">var</span> arr = x.split(<span class="string">' '</span>);</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span>;</span><br><span class="line">  <span class="comment">//Iterate through the array with input words to find the one with the greatest sum</span></span><br><span class="line">  <span class="keyword">var</span> newArr = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">word</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; word.length; i++) &#123;</span><br><span class="line">      sum += str.indexOf(word[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//Return the word with the greatest sum</span></span><br><span class="line">  <span class="keyword">return</span> arr[newArr.indexOf(<span class="built_in">Math</span>.max(...newArr))];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">high</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">as</span> = s.split(<span class="string">' '</span>).map(<span class="function"><span class="params">s</span>=&gt;</span>[...s].reduce(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a+b.charCodeAt(<span class="number">0</span>)<span class="number">-96</span>,<span class="number">0</span>));</span><br><span class="line">  <span class="keyword">return</span> s.split(<span class="string">' '</span>)[<span class="keyword">as</span>.indexOf(<span class="built_in">Math</span>.max(...as))];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="keyword">const</span> &#123; compose, reduce, split &#125; = <span class="built_in">require</span>(<span class="string">'ramda'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> score = compose(</span><br><span class="line">  reduce(<span class="function">(<span class="params">r, v</span>) =&gt;</span> r + v.charCodeAt() - <span class="number">96</span>, <span class="number">0</span>),</span><br><span class="line">  split(<span class="string">''</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> high = compose(</span><br><span class="line">  reduce(<span class="function">(<span class="params">r, v</span>) =&gt;</span> score(v) &gt; score(r) ? v : r, <span class="string">''</span>),</span><br><span class="line">  split(<span class="string">' '</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;Trolls are attacking your comment section!&lt;/p&gt;
&lt;p&gt;A common way to deal with this situation is to remove all of the 
      
    
    </summary>
    
      <category term="web" scheme="http://gnbyj.cn/categories/web/"/>
    
    
      <category term="javascript" scheme="http://gnbyj.cn/tags/javascript/"/>
    
      <category term="codewars" scheme="http://gnbyj.cn/tags/codewars/"/>
    
      <category term="java" scheme="http://gnbyj.cn/tags/java/"/>
    
      <category term="python" scheme="http://gnbyj.cn/tags/python/"/>
    
      <category term="css" scheme="http://gnbyj.cn/tags/css/"/>
    
      <category term="sass" scheme="http://gnbyj.cn/tags/sass/"/>
    
  </entry>
  
  <entry>
    <title>梦想好物</title>
    <link href="http://gnbyj.cn/2019/03/02/%5B2019-03-02%5D%E5%A5%BD%E7%89%A9%E5%BF%97/"/>
    <id>http://gnbyj.cn/2019/03/02/[2019-03-02]好物志/</id>
    <published>2019-03-02T03:10:00.000Z</published>
    <updated>2019-03-02T03:12:32.356Z</updated>
    
    <content type="html"><![CDATA[<p>Concept2划船机</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Concept2划船机&lt;/p&gt;

      
    
    </summary>
    
      <category term="life" scheme="http://gnbyj.cn/categories/life/"/>
    
    
      <category term="健身" scheme="http://gnbyj.cn/tags/%E5%81%A5%E8%BA%AB/"/>
    
      <category term="好物" scheme="http://gnbyj.cn/tags/%E5%A5%BD%E7%89%A9/"/>
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="http://gnbyj.cn/2019/02/28/%5B2019-02-28%5Dwebpack/"/>
    <id>http://gnbyj.cn/2019/02/28/[2019-02-28]webpack/</id>
    <published>2019-02-28T04:10:00.000Z</published>
    <updated>2019-02-28T09:59:39.140Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>FED - webpack流程 <a href="http://taobaofed.org/blog/2016/09/09/webpack-flow/" target="_blank" rel="noopener">http://taobaofed.org/blog/2016/09/09/webpack-flow/</a></p></blockquote><ol><li>读取文件分析模块依赖</li><li>对模块进行解析执行(深度遍历)</li><li>针对不同的模块使用相应的loader</li><li>编译模块，生成抽象语法树AST</li><li>循环遍历AST树，拼接输出js</li></ol><hr><blockquote><p><a href="https://blog.csdn.net/qq_26708777/article/details/79210549" target="_blank" rel="noopener">https://blog.csdn.net/qq_26708777/article/details/79210549</a></p></blockquote><p>webpack-parallel-uglify-plugin</p><p>会开启多个子进程，把对多个文件压缩的工作分别给多个子进程去完成，但是每个子进程还是通过UglifyJS去压缩代码。无非就是变成了并行处理该压缩了，并行处理多个子任务，效率会更加的提高。</p><blockquote><p>压缩慢：因为压缩JS代码需要先把代码解析成用Object抽象表示的AST语法树，再去应用各种规则分析和处理AST，导致这个过程耗时非常大。</p></blockquote><p>compression-webpack-plugin </p><p>该插件能够将资源文件压缩为.gz文件，并且根据客户端的需求按需加载。 </p><p>extract-text-webpack-plugin</p><p>剥离css文件，单独打包</p><p>html-webpack-plugin </p><p>开启html压缩，自动添加上面生成的静态资源</p><p>CommonsChunkPlugin</p><p>这个插件用来提取公共的module到独立的chunk文件里。</p><p>webpack-bundle-analyzer</p><p>将打包后的内容束展示为方便交互的直观树状图，让你明白你所构建包中真正引入的内容</p><p>copy-webpack-plugin</p><p>在webpack中拷贝文件和文件夹 </p><hr><p>模块化拆分打包</p><ol><li>利用glob库匹配出所有模块的入口文件，得到一个数组；</li><li>遍历数组拿到路径，提取路径中模块名，将二者维护进对象中；</li><li>遍历这个对象的key(即模块名)，如果与命令相同，则赋值给入口变量；</li></ol><hr><p>整体打包</p><ol><li>利用glob库匹配出所有模块的入口文件，得到一个数组；</li><li>将数组切分为4个一组；</li><li>开启子进程，遍历数组拿到模块名，使用<code>child_process.spawn(command)</code>运行打包命令</li></ol><hr><p><a href="https://segmentfault.com/a/1190000012113011" target="_blank" rel="noopener">webpack externals 深入理解</a></p><p>按照官方文档的解释，如果我们想引用一个库，但是又不想让webpack打包，并且又不影响我们在程序中以CMD、AMD或者window/global全局等方式进行使用，那就可以通过配置externals。</p><p>这个功能主要是用在创建一个库的时候用的，但是也可以在我们项目开发中充分使用。 </p><blockquote><p>如果你写的库要支持各种环境，你需要设置output中的libraryTarget为umd，也就是将打包的文件，生成为umd规范，适用于各种环境。libraryTarget和externals有藕断丝连的关系 </p></blockquote><p><code>externals</code>和<code>libraryTarget</code>的关系</p><ul><li>libraryTarget 配置如何暴露 library。如果不设置library，那这个library就不暴露。就相当于一个自执行函数</li><li>externals是决定的是以哪种模式去加载所引入的额外的包</li><li>libraryTarget决定了你的library运行在哪个环境，哪个环境也就决定了你哪种模式去加载所引入的额外的包。也就是说，externals应该和libraryTarget保持一致。library运行在浏览器中的，你设置externals的模式为commonjs，那代码肯定就运行不了了。</li><li>如果是应用程序开发，一般是运行在浏览器环境libraryTarget可以不设置，externals默认的模式是global，也就是以全局变量的模式加载所引入外部的库。</li></ul><hr><blockquote><p>webpack devtool类型对比</p><p><a href="https://www.cnblogs.com/hhhyaaon/p/5657469.html" target="_blank" rel="noopener">https://www.cnblogs.com/hhhyaaon/p/5657469.html</a></p></blockquote><p>开发环境推荐： <code>cheap-module-eval-source-map</code> </p><p>生产环境推荐： <code>cheap-module-source-map</code> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;FED - webpack流程 &lt;a href=&quot;http://taobaofed.org/blog/2016/09/09/webpack-flow/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://taobaofed
      
    
    </summary>
    
      <category term="web" scheme="http://gnbyj.cn/categories/web/"/>
    
    
      <category term="webpack" scheme="http://gnbyj.cn/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>ES6</title>
    <link href="http://gnbyj.cn/2019/02/27/%5B2019-02-27%5DES6/"/>
    <id>http://gnbyj.cn/2019/02/27/[2019-02-27]ES6/</id>
    <published>2019-02-27T01:10:00.000Z</published>
    <updated>2019-02-28T14:31:37.490Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="http://es6.ruanyifeng.com" target="_blank" rel="noopener">http://es6.ruanyifeng.com</a></p></blockquote><ol><li><h5 id="新的变量声明方式-let-const"><a href="#新的变量声明方式-let-const" class="headerlink" title="新的变量声明方式 let/const"></a>新的变量声明方式 let/const</h5><p>使用let来声明一个【值会被改变】的变量</p><p>使用const来声明一个【值不会被改变】的变量，也可以称之为常量</p><blockquote><p>ES6 声明变量的六种方法</p><p>ES5 只有两种声明变量的方法：<code>var</code>命令和<code>function</code>命令。</p><p>ES6 除了添加<code>let</code>和<code>const</code>命令，</p><p>另外两种声明变量的方法：<code>import</code>命令和<code>class</code>命令。</p><p>所以，ES6 一共有 6 种声明变量的方法。</p></blockquote></li></ol><ol start="2"><li><h5 id="箭头函数的使用"><a href="#箭头函数的使用" class="headerlink" title="箭头函数的使用"></a>箭头函数的使用</h5><p>箭头函数中，没有自己的this。如果你在箭头函数中使用了this，那么该this一定是最近外层的this。 </p><p>不能用call/apply/bind来改变this指向。 </p><blockquote><p>ES6 默认采用严格模式，this不会自动指向window对象</p></blockquote></li></ol><ol start="3"><li><h5 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h5><p>使用 <code></code> 将整个字符串包裹起来，而在其中使用 ${} 来包裹一个变量或者一个表达式。 </p><p>支持换行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">`<span class="subst">$&#123;a&#125;</span>+<span class="subst">$&#123;b&#125;</span>=<span class="subst">$&#123;a+b&#125;</span>`</span>;</span><br><span class="line">str <span class="comment">// "20+30=50"</span></span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>解构赋值</p><p>数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> [a, b] = arr;</span><br><span class="line">a; <span class="comment">// 1</span></span><br><span class="line">b; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">k1</span>: <span class="string">'china'</span>, <span class="attr">k2</span>: <span class="string">'usa'</span>, <span class="attr">k3</span>: <span class="string">'japan'</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> &#123;k1, k2, k3&#125; = obj;</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>默认参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = x || <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">var</span> y = y || <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x=<span class="number">20</span>, y=<span class="number">30</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li><p>数组的扩展</p><p>展开运算符（spread）是三个点（<code>...</code>） </p><p>将一个数组转为用逗号分隔的参数序列</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="comment">// 1 2 3 4</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span>, </span><br><span class="line">  c: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  ...obj1,</span><br><span class="line">  d: <span class="number">4</span>,</span><br><span class="line">  e: <span class="number">5</span>,</span><br><span class="line">  f: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 有木有觉得很像什么？Vuex里的...mapState  ...mapGetters  ...mapActions</span></span><br></pre></td></tr></table></figure></li></ol><ol start="7"><li><p>every() / some()</p><blockquote><p>every() 一假即假</p><p>some() 一真即真</p></blockquote></li></ol><ol start="8"><li><p>class/extends</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Function() / .prototype</span><br></pre></td></tr></table></figure></li></ol><ol start="9"><li><p>Promise</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 解决回调嵌套</span><br><span class="line">new Promise(function(resolve, reject)&#123;</span><br><span class="line">    if (true) &#123;</span><br><span class="line">        resolve(data);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        reject(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.then(function()&#123;</span><br><span class="line">    // resolve</span><br><span class="line">&#125;, function()&#123;</span><br><span class="line">    // reject</span><br><span class="line">&#125;)</span><br><span class="line">.then(//同上)</span><br><span class="line">.catch(function()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://es6.ruanyifeng.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://es6.ruanyifeng.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="web" scheme="http://gnbyj.cn/categories/web/"/>
    
    
      <category term="es6" scheme="http://gnbyj.cn/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>axios</title>
    <link href="http://gnbyj.cn/2019/02/27/%5B2019-02-27%5Daxios/"/>
    <id>http://gnbyj.cn/2019/02/27/[2019-02-27]axios/</id>
    <published>2019-02-27T01:10:00.000Z</published>
    <updated>2019-02-27T08:04:06.068Z</updated>
    
    <content type="html"><![CDATA[<h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><p>基于Promise的HTTP库，<a href="https://github.com/axios/axios" target="_blank" rel="noopener">https://github.com/axios/axios</a> </p><p>axios中文文档：<a href="http://www.axios-js.com/zh-cn/docs/" target="_blank" rel="noopener">http://www.axios-js.com/zh-cn/docs/</a></p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>从浏览器中创建 XMLHttpRequest</li><li>从 node.js 发出 http 请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>自动转换JSON数据</li><li>客户端支持防止 <a href="http://baike.baidu.com/link?url=iUceAfgyfJOacUtjPgT4ifaSOxDULAc_MzcLEOTySflAn5iLlHfMGsZMtthBm5sK4y6skrSvJ1HOO2qKtV1ej_" target="_blank" rel="noopener">CSRF/XSRF</a></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>);</span><br><span class="line"><span class="comment">// post</span></span><br><span class="line">axios.post(<span class="string">'/user'</span>, &#123;</span><br><span class="line">    firstName: <span class="string">'Fred'</span>,</span><br><span class="line">    lastName: <span class="string">'Flintstone'</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// get 1</span></span><br><span class="line">axios.get(<span class="string">'/user?ID=12345'</span>)</span><br><span class="line"><span class="comment">// get 2</span></span><br><span class="line">axios.get(<span class="string">'/user'</span>, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      ID: <span class="number">12345</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">    <span class="built_in">console</span>.log(response.data);</span><br><span class="line">    <span class="built_in">console</span>.log(response.status);</span><br><span class="line">    <span class="built_in">console</span>.log(response.statusText);</span><br><span class="line">    <span class="built_in">console</span>.log(response.headers);</span><br><span class="line">    <span class="built_in">console</span>.log(response.config);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 处理错误</span></span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">    <span class="keyword">if</span> (error.response) &#123;</span><br><span class="line">      <span class="comment">// The request was made and the server responded with a status code</span></span><br><span class="line">      <span class="comment">// that falls out of the range of 2xx</span></span><br><span class="line">      <span class="comment">// 请求已发出，但服务器使用状态代码进行响应，落在2xx的范围之外</span></span><br><span class="line">      <span class="built_in">console</span>.log(error.response.data);</span><br><span class="line">      <span class="built_in">console</span>.log(error.response.status);</span><br><span class="line">      <span class="built_in">console</span>.log(error.response.headers);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error.request) &#123;</span><br><span class="line">      <span class="comment">// The request was made but no response was received</span></span><br><span class="line">      <span class="comment">// `error.request` is an instance of XMLHttpRequest in the browser and an instance of</span></span><br><span class="line">      <span class="comment">// http.ClientRequest in node.js</span></span><br><span class="line">      <span class="built_in">console</span>.log(error.request);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Something happened in setting up the request that triggered an Error</span></span><br><span class="line">      <span class="comment">// 在设置触发错误的请求时发生了错误</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Error'</span>, error.message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(error.config);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>使用【validateStatus配置选项】定义自定义HTTP状态码错误范围：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">axios.get（<span class="string">'/ user / 12345'</span>，&#123;</span><br><span class="line">   validateStatus：<span class="function"><span class="keyword">function</span>（<span class="title">status</span>）</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> status &lt; <span class="number">500</span>; <span class="comment">//仅当状态代码大于或等于500时拒绝</span></span><br><span class="line">   &#125;&#125;</span><br><span class="line">&#125;）</span><br></pre></td></tr></table></figure><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">axios.all(iterable)</span><br><span class="line">axios.spread(callback)</span><br></pre></td></tr></table></figure><h2 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'https://some-domain.com/api/'</span>,</span><br><span class="line">  timeout: <span class="number">1000</span>,</span><br><span class="line">  headers: &#123;<span class="string">'X-Custom-Header'</span>: <span class="string">'foobar'</span>&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="requests-response-拦截器"><a href="#requests-response-拦截器" class="headerlink" title="requests/response 拦截器"></a>requests/response 拦截器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//在发送请求之前做某事</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//请求错误时做些事</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//对响应数据做些事</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//请求错误时做些事</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="删除拦截器"><a href="#删除拦截器" class="headerlink" title="删除拦截器"></a>删除拦截器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myInterceptor = axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span>&#125;);</span><br><span class="line">axios.interceptors.request.eject(myInterceptor);</span><br></pre></td></tr></table></figure><h3 id="将拦截器添加到axios的自定义实例"><a href="#将拦截器添加到axios的自定义实例" class="headerlink" title="将拦截器添加到axios的自定义实例"></a>将拦截器添加到axios的自定义实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> instance = axios.create();</span><br><span class="line">instance.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="默认全局配置"><a href="#默认全局配置" class="headerlink" title="默认全局配置"></a>默认全局配置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL = <span class="string">'https://api.example.com'</span>; <span class="comment">// 配置接口地址</span></span><br><span class="line">axios.defaults.headers.common[<span class="string">'Authorization'</span>] = AUTH_TOKEN;</span><br><span class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span>; <span class="comment">// 配置请求头</span></span><br></pre></td></tr></table></figure><h2 id="配置优先级顺序"><a href="#配置优先级顺序" class="headerlink" title="配置优先级顺序"></a>配置优先级顺序</h2><p>【请求的config参数】 &gt; 【实例的defaults属性】 &gt; 【lib / defaults.js中的库默认值】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用库提供的配置默认值创建实例</span></span><br><span class="line"><span class="comment">//此时，超时配置值为`0`，这是库的默认值</span></span><br><span class="line"><span class="keyword">var</span> instance = axios.create（）;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//覆盖库的超时默认值</span></span><br><span class="line"><span class="comment">//现在所有请求将在超时前等待2.5秒</span></span><br><span class="line">instance.defaults.timeout = <span class="number">2500</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//为已知需要花费很长时间的请求覆写超时设置</span></span><br><span class="line">instance.get（<span class="string">'/ longRequest'</span>，&#123;</span><br><span class="line">   timeout：<span class="number">5000</span></span><br><span class="line">&#125;）;</span><br></pre></td></tr></table></figure><h2 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h2><blockquote><p>axios cancel token API基于可取消的promise提议</p></blockquote><p>使用CancelToken.source工厂创建一个取消令牌 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CancelToken = axios.CancelToken;</span><br><span class="line"><span class="keyword">const</span> source = CancelToken.source();</span><br><span class="line">axios.get(<span class="string">'/user/12345'</span>, &#123;</span><br><span class="line">  cancelToken: source.token</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">thrown</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (axios.isCancel(thrown)) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Request canceled'</span>, thrown.message);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 处理错误</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消请求（消息参数是可选的）</span></span><br><span class="line">source.cancel（<span class="string">'操作被用户取消。'</span>）;</span><br></pre></td></tr></table></figure><p>将【执行器函数】传递给CancelToken构造函数来创建取消令牌：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CancelToken = axios.CancelToken;</span><br><span class="line"><span class="keyword">var</span> cancel;</span><br><span class="line"> </span><br><span class="line">axios.get（<span class="string">'/ user / 12345'</span>，&#123;</span><br><span class="line">   cancelToken：<span class="keyword">new</span> CancelToken（<span class="function"><span class="keyword">function</span> <span class="title">executor</span>（<span class="title">c</span>）</span>&#123;</span><br><span class="line">     <span class="comment">//一个执行器函数接收一个取消函数作为参数</span></span><br><span class="line">     cancel = c;</span><br><span class="line">   &#125;）</span><br><span class="line">&#125;）;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 取消请求</span></span><br><span class="line">clear();</span><br></pre></td></tr></table></figure><h2 id="使用application-x-www-form-urlencoded格式"><a href="#使用application-x-www-form-urlencoded格式" class="headerlink" title="使用application / x-www-form-urlencoded格式"></a>使用application / x-www-form-urlencoded格式</h2><p>默认情况下，axios发送数据的形式为<code>application/json;charset=UTF-8</code>，如若想以<code>application/x-www-form-urlencoded</code>的形式发送数据，可以使用如下方法：</p><h3 id="Browser"><a href="#Browser" class="headerlink" title="Browser"></a>Browser</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不是所有浏览器都支持</span></span><br><span class="line"><span class="keyword">const</span> params = <span class="keyword">new</span> URLSearchParams();</span><br><span class="line">params.append(<span class="string">'param1'</span>, <span class="string">'value1'</span>);</span><br><span class="line">params.append(<span class="string">'param2'</span>, <span class="string">'value2'</span>);</span><br><span class="line">axios.post(<span class="string">'/foo'</span>, params);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入qs模块</span></span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">'qs'</span>);</span><br><span class="line">axios.post(<span class="string">'/foo'</span>, qs.stringify(&#123; <span class="string">'bar'</span>: <span class="number">123</span> &#125;));</span><br></pre></td></tr></table></figure><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 也可以使用qs模块</span></span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line">axios.post(<span class="string">'http://something.com/'</span>, querystring.stringify(&#123; <span class="attr">foo</span>: <span class="string">'bar'</span> &#125;));</span><br></pre></td></tr></table></figure><h2 id="请求配置"><a href="#请求配置" class="headerlink" title="请求配置"></a>请求配置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// `url`是将用于请求的服务器URL</span></span><br><span class="line">    url: <span class="string">'/user'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `method`是发出请求时使用的请求方法</span></span><br><span class="line">    method: <span class="string">'get'</span>, <span class="comment">// 默认</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `baseURL`将被添加到`url`前面，除非`url`是绝对的。</span></span><br><span class="line">    <span class="comment">// 可以方便地为 axios 的实例设置`baseURL`，以便将相对 URL 传递给该实例的方法。</span></span><br><span class="line">    baseURL: <span class="string">'https://some-domain.com/api/'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `transformRequest`允许在请求数据发送到服务器之前对其进行更改</span></span><br><span class="line">    <span class="comment">// 这只适用于请求方法'PUT'，'POST'和'PATCH'</span></span><br><span class="line">    <span class="comment">// 数组中的最后一个函数必须返回一个字符串，一个 ArrayBuffer或一个 Stream</span></span><br><span class="line">    transformRequest: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 做任何你想要的数据转换</span></span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `transformResponse`允许在 then / catch之前对响应数据进行更改</span></span><br><span class="line">    transformResponse: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Do whatever you want to transform the data</span></span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `headers`是要发送的自定义 headers</span></span><br><span class="line">    headers: &#123;<span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `params`是要与请求一起发送的URL参数</span></span><br><span class="line">    <span class="comment">// 必须是纯对象或URLSearchParams对象</span></span><br><span class="line">    params: &#123;</span><br><span class="line">    ID: <span class="number">12345</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `paramsSerializer`是一个可选的函数，负责序列化`params`</span></span><br><span class="line">    <span class="comment">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class="line">    paramsSerializer: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Qs.stringify(params, &#123;<span class="attr">arrayFormat</span>: <span class="string">'brackets'</span>&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `data`是要作为请求主体发送的数据</span></span><br><span class="line">    <span class="comment">// 仅适用于请求方法“PUT”，“POST”和“PATCH”</span></span><br><span class="line">    <span class="comment">// 当没有设置`transformRequest`时，必须是以下类型之一：</span></span><br><span class="line">    <span class="comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class="line">    <span class="comment">// - Browser only: FormData, File, Blob</span></span><br><span class="line">    <span class="comment">// - Node only: Stream</span></span><br><span class="line">    data: &#123;</span><br><span class="line">    firstName: <span class="string">'Fred'</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `timeout`指定请求超时之前的毫秒数。</span></span><br><span class="line">    <span class="comment">// 如果请求的时间超过'timeout'，请求将被中止。</span></span><br><span class="line">    timeout: <span class="number">1000</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `withCredentials`指示是否跨站点访问控制请求</span></span><br><span class="line">    <span class="comment">// should be made using credentials</span></span><br><span class="line">    withCredentials: <span class="literal">false</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `adapter'允许自定义处理请求，这使得测试更容易。</span></span><br><span class="line">    <span class="comment">// 返回一个promise并提供一个有效的响应（参见[response docs]（＃response-api））</span></span><br><span class="line">    adapter: <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `auth'表示应该使用 HTTP 基本认证，并提供凭据。</span></span><br><span class="line">    <span class="comment">// 这将设置一个`Authorization'头，覆盖任何现有的`Authorization'自定义头，使用`headers`设置。</span></span><br><span class="line">    auth: &#123;</span><br><span class="line">        username: <span class="string">'janedoe'</span>,</span><br><span class="line">        password: <span class="string">'s00pers3cret'</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// “responseType”表示服务器将响应的数据类型</span></span><br><span class="line">    <span class="comment">// 包括 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'</span></span><br><span class="line">    responseType: <span class="string">'json'</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//`xsrfCookieName`是要用作 xsrf 令牌的值的cookie的名称</span></span><br><span class="line">    xsrfCookieName: <span class="string">'XSRF-TOKEN'</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `xsrfHeaderName`是携带xsrf令牌值的http头的名称</span></span><br><span class="line">    xsrfHeaderName: <span class="string">'X-XSRF-TOKEN'</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `onUploadProgress`允许处理上传的进度事件</span></span><br><span class="line">    onUploadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 使用本地 progress 事件做任何你想要做的</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `onDownloadProgress`允许处理下载的进度事件</span></span><br><span class="line">    onDownloadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do whatever you want with the native progress event</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `maxContentLength`定义允许的http响应内容的最大大小</span></span><br><span class="line">    maxContentLength: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `validateStatus`定义是否解析或拒绝给定的promise</span></span><br><span class="line">    <span class="comment">// HTTP响应状态码。如果`validateStatus`返回`true`（或被设置为`null` promise将被解析;否则，promise将被</span></span><br><span class="line">    <span class="comment">// 拒绝。</span></span><br><span class="line">    validateStatus: <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">// default</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `maxRedirects`定义在node.js中要遵循的重定向的最大数量。</span></span><br><span class="line">    <span class="comment">// 如果设置为0，则不会遵循重定向。</span></span><br><span class="line">    maxRedirects: <span class="number">5</span>, <span class="comment">// 默认</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `httpAgent`和`httpsAgent`用于定义在node.js中分别执行http和https请求时使用的自定义代理。</span></span><br><span class="line">    <span class="comment">// 允许配置类似`keepAlive`的选项，</span></span><br><span class="line">    <span class="comment">// 默认情况下不启用。</span></span><br><span class="line">    httpAgent: <span class="keyword">new</span> http.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">    httpsAgent: <span class="keyword">new</span> https.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 'proxy'定义代理服务器的主机名和端口</span></span><br><span class="line">    <span class="comment">// `auth`表示HTTP Basic auth应该用于连接到代理，并提供credentials。</span></span><br><span class="line">    <span class="comment">// 这将设置一个`Proxy-Authorization` header，覆盖任何使用`headers`设置的现有的`Proxy-Authorization` 自定义 headers。</span></span><br><span class="line">    proxy: &#123;</span><br><span class="line">        host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        port: <span class="number">9000</span>,</span><br><span class="line">        auth: : &#123;</span><br><span class="line">            username: <span class="string">'mikeymike'</span>,</span><br><span class="line">            password: <span class="string">'rapunz3l'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// “cancelToken”指定可用于取消请求的取消令牌</span></span><br><span class="line">    <span class="comment">// (see Cancellation section below for details)</span></span><br><span class="line">    cancelToken: <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> (<span class="params">cancel</span>) </span>&#123;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="响应结构"><a href="#响应结构" class="headerlink" title="响应结构"></a>响应结构</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// `data` 由服务器提供的响应</span></span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `status` 来自服务器响应的 HTTP 状态码</span></span><br><span class="line">  status: <span class="number">200</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `statusText` 来自服务器响应的 HTTP 状态信息</span></span><br><span class="line">  statusText: <span class="string">'OK'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `headers` 服务器响应的头</span></span><br><span class="line">  headers: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// `config` 是为请求提供的配置信息</span></span><br><span class="line">  config: &#123;&#125;,</span><br><span class="line"> <span class="comment">// 'request'</span></span><br><span class="line">  <span class="comment">// `request` is the request that generated this response</span></span><br><span class="line">  <span class="comment">// It is the last ClientRequest instance in node.js (in redirects)</span></span><br><span class="line">  <span class="comment">// and an XMLHttpRequest instance the browser</span></span><br><span class="line">  request: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="封装axios"><a href="#封装axios" class="headerlink" title="封装axios"></a>封装axios</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Message &#125; <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="comment">//引入cookie操作依赖</span></span><br><span class="line"><span class="keyword">import</span> Cookies <span class="keyword">from</span> <span class="string">'js-cookie'</span></span><br><span class="line"><span class="comment">//引入路由对象</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'@/router/index'</span></span><br><span class="line"></span><br><span class="line">axios.defaults.timeout = <span class="number">5000</span>;</span><br><span class="line">axios.defaults.baseURL = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">config =&gt; &#123;</span><br><span class="line"><span class="keyword">var</span> token;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> Cookies.get(<span class="string">'user'</span>) === <span class="string">'undefined'</span>)&#123;</span><br><span class="line"><span class="comment">// 空</span></span><br><span class="line">token = <span class="string">''</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// 登录用户，从cookie中取出token</span></span><br><span class="line">token = <span class="built_in">JSON</span>.parse(Cookies.get(<span class="string">'user'</span>).token)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 添加配置项</span></span><br><span class="line">config.data = <span class="built_in">JSON</span>.stringify(config.data);</span><br><span class="line">config.headers = &#123;</span><br><span class="line"><span class="string">'Content-type'</span>: <span class="string">'application/json'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(token != <span class="string">''</span>)&#123;</span><br><span class="line">config.headers.token = token;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> config;</span><br><span class="line">&#125;,</span><br><span class="line">error =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">response =&gt; &#123;</span><br><span class="line"><span class="comment">// 当返回信息为未登录或者登录失效的时候重定向为登录页</span></span><br><span class="line"><span class="keyword">if</span>(response.data.code === <span class="string">'ERR_001'</span> || response.data.message === <span class="string">'用户未登录或登录超时，请登录！'</span>)&#123;</span><br><span class="line"><span class="comment">//从哪个页面跳转</span></span><br><span class="line">router.push(&#123;<span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">query</span>: &#123;<span class="attr">redirect</span>: router.currentRoute.fullPath&#125;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> response;</span><br><span class="line">&#125;,</span><br><span class="line">error =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装get方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fetch</span>(<span class="params">url, params=&#123;&#125;</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">axios.get(url, &#123;</span><br><span class="line"><span class="comment">// 上送参数</span></span><br><span class="line">paramKey: paramVal</span><br><span class="line">&#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">resolve(response.data);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">reject(err);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装post请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">url, data=&#123;&#125;</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">axios.post(url, data)</span><br><span class="line">.then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">resolve(response.data);</span><br><span class="line">&#125;,err =&gt; &#123;</span><br><span class="line">reject(err);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装导出excel文件请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">exportExcel</span>(<span class="params">url, data=&#123;&#125;</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">axios(&#123;</span><br><span class="line">method: <span class="string">'post'</span>,</span><br><span class="line">url: url,</span><br><span class="line">data: data,</span><br><span class="line">responseType: <span class="string">'blob'</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">resolve(response.data);</span><br><span class="line"><span class="keyword">let</span> blob = <span class="keyword">new</span> Blob([response.data], &#123;<span class="attr">type</span>: <span class="string">"application/vnd.ms-excel"</span>&#125;);</span><br><span class="line"><span class="keyword">let</span> fileName = <span class="string">'订单列表_'</span> + <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>()) + <span class="string">'.xls'</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.navigator.msSaveOrOpenBlob)&#123;</span><br><span class="line">navigator.msSaveBlob(blob, fileName);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">link.href = <span class="built_in">window</span>.URL.createObjectURL(blob);</span><br><span class="line">link.download = fileName;</span><br><span class="line">link.click();</span><br><span class="line"><span class="built_in">window</span>.URL.revokeObjectURL(link.href);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,err=&gt;&#123;</span><br><span class="line">reject(err);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装patch请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">patch</span>(<span class="params">url,data = &#123;&#125;</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">axios.patch(url,data)</span><br><span class="line">.then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">resolve(response.data);</span><br><span class="line">&#125;,err =&gt; &#123;</span><br><span class="line">reject(err)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装put请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">put</span>(<span class="params">url,data = &#123;&#125;</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">axios.put(url,data)</span><br><span class="line">.then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">resolve(response.data);</span><br><span class="line">&#125;,err =&gt; &#123;</span><br><span class="line">reject(err)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路由拦截"><a href="#路由拦截" class="headerlink" title="路由拦截"></a>路由拦截</h2><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Message &#125; <span class="keyword">from</span> <span class="string">"element-ui"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局前置守卫 —— 路由拦截</span></span><br><span class="line"><span class="comment">// 在路由meta添加添加一个字段requireLogin,设置为true的时候</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// to.matched 的数组，如果在mate中有requireLogin，那么就返回true</span></span><br><span class="line">    <span class="comment">// 包含当前路由的所有嵌套路径片段的路由记录</span></span><br><span class="line">    <span class="comment">// ES6语法：some一真即真，every一假即假</span></span><br><span class="line">    <span class="comment">// 箭头函数：`var f = v =&gt; v` === `var f = function(v)&#123;return v;&#125;`</span></span><br><span class="line">    <span class="keyword">if</span>(to.matched.some(<span class="function"><span class="params">res</span> =&gt;</span> res.meta.requireLogin))&#123;</span><br><span class="line">        <span class="comment">// 判断是否需要登录权限</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.localStorage.getItem(<span class="string">"loginUserBaseInfo"</span>)) &#123;</span><br><span class="line">          <span class="comment">// 判断是否登录</span></span><br><span class="line">          <span class="keyword">let</span> lifeTime =</span><br><span class="line">            <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(<span class="string">"loginUserBaseInfo"</span>)).lifeTime *</span><br><span class="line">            <span class="number">1000</span>;</span><br><span class="line">          <span class="keyword">let</span> nowTime = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime(); <span class="comment">// 当前时间的时间戳</span></span><br><span class="line">          <span class="keyword">if</span> (nowTime &lt; lifeTime) &#123;</span><br><span class="line">            next();</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Message(&#123;</span><br><span class="line">              showClose: <span class="literal">true</span>,</span><br><span class="line">              message: <span class="string">"登录状态信息过期,请重新登录"</span>,</span><br><span class="line">              type: <span class="string">"error"</span></span><br><span class="line">            &#125;);</span><br><span class="line">            next(&#123;</span><br><span class="line">              path: <span class="string">"/login"</span></span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 没登录则跳转到登录界面</span></span><br><span class="line">          next(&#123;</span><br><span class="line">            path: <span class="string">"/login"</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;axios&quot;&gt;&lt;a href=&quot;#axios&quot; class=&quot;headerlink&quot; title=&quot;axios&quot;&gt;&lt;/a&gt;axios&lt;/h1&gt;&lt;p&gt;基于Promise的HTTP库，&lt;a href=&quot;https://github.com/axios/axios&quot; t
      
    
    </summary>
    
      <category term="web" scheme="http://gnbyj.cn/categories/web/"/>
    
    
      <category term="axios" scheme="http://gnbyj.cn/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>Vuex</title>
    <link href="http://gnbyj.cn/2019/02/26/%5B2019-02-26%5DVuex/"/>
    <id>http://gnbyj.cn/2019/02/26/[2019-02-26]Vuex/</id>
    <published>2019-02-26T12:00:00.000Z</published>
    <updated>2019-02-27T12:24:42.580Z</updated>
    
    <content type="html"><![CDATA[<p>Vuex</p><p>专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>；</p><p>管理应用的所有组件的状态；</p><blockquote><p>集中式存储；</p><p>以一个全局单例模式管理；</p></blockquote><p>Vuex单向数据流</p><blockquote><p><code>Vue Components</code>  –&gt; Dispatch() –&gt; <code>Actions</code>  –&gt; Commit() –&gt; <code>Mutations</code> –&gt;  Mutate() –&gt; <code>State</code> –&gt; Render() –&gt; <code>Vue Components</code></p></blockquote><p>简单的理解就是你在state中定义了一个数据之后，你可以在所在项目中的任何一个组件里进行获取、进行修改，并且你的修改可以得到全局的响应变更。 </p><p>Vuex 和单纯的全局对象有以下两点不同： </p><ol><li>Vuex 的状态存储是响应式的。 store中的状态发生变化，相应的租金啊也会相应地更新。</li><li>改变 store 中的状态的唯一途径就是显式地<strong>提交 (commit) mutation</strong>。 方便地跟踪每一个状态的变化。 </li></ol><blockquote><p>由于 store 中的状态是响应式的，</p><p>在组件中调用 store 中的状态简单到仅需要在计算属性中返回即可。</p><p>触发变化也仅仅是在组件的 methods 中提交 mutation。 </p></blockquote><p>通过在根实例中注册 <code>store</code> 选项，所有子组件都能通过 <code>this.$store</code> 访问到。</p><hr><p>在mutations中，向 <code>store.commit</code> 传入额外的参数，即 mutation 的 <strong>载荷（payload）</strong>，在大多数情况下，载荷应该是一个对象。</p><p><strong>使用常量替代 Mutation 事件类型</strong></p><blockquote><p>这样可以使 linter 之类的工具发挥作用，同时把这些常量放在单独的文件中可以让你的代码合作者对整个 app 包含的 mutation 一目了然 </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mutation-types.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SOME_MUTATION = <span class="string">'SOME_MUTATION'</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; SOME_MUTATION &#125; <span class="keyword">from</span> <span class="string">'./mutation-types'</span></span><br><span class="line">mutations: &#123;</span><br><span class="line">  <span class="comment">// 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名</span></span><br><span class="line">  [SOME_MUTATION] (state) &#123;</span><br><span class="line">    <span class="comment">// mutate state</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一条重要的原则就是要记住 <strong>mutation 必须是同步函数</strong>。 </p><p>因为任何在回调函数中进行的状态的改变都是不可追踪的。 </p></blockquote><hr><p>不理想的获取方式：</p><p><code>this.$store.state.showFooter</code> </p><p>理想的取值方式：</p><p><code>const getters</code></p><p>在computed里：<code>return this.$store.getters.isShow;</code></p><blockquote><p>vuex官方API提供了一个getters，和vue计算属性computed一样，来实时监听state值的变化(最新状态) </p></blockquote><p>不理想的改变值的方式：</p><p><code>this.$store.commit(&#39;show&#39;)</code></p><p>理想的改变值方式：</p><p><code>this.$store.dispatch(&#39;hideFooter&#39;，arg)</code></p><blockquote><p>在 Vuex 中，mutations里面的方法 都是同步事务</p><p>Action 里面的方法是用来异步触发mutations里面的方法，我们可以在 action 内部执行<strong>异步</strong>操作，Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象和要变化的形参</p><p><code>context.state</code> / <code>context.getters</code>  / <code>context.commit</code></p></blockquote><hr><p><strong>modules 模块化 以及 组件中引入 mapGetters、mapActions 和 mapStates的使用</strong> </p><p>单独文件夹，独立的<code>state/getters/mutations/actions</code></p><p><code>namespaced:true</code>——用于在全局引用此文件里的方法时标识这个文件名</p><p>在需要用的 组件里面先导入 <code>import {mapState,mapGetters,mapActions} from &#39;vuex&#39;;</code> </p><p>辅助函数</p><blockquote><p>使用 <code>mapState</code> 辅助函数帮助我们生成计算属性 </p><p><code>mapGetters</code> 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性</p><p>使用 <code>mapActions</code> 辅助函数将组件的 methods 映射为 <code>store.dispatch</code> 调用 </p></blockquote><p>当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 <code>mapState</code> 传一个字符串数组。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">computed: mapState([</span><br><span class="line">  <span class="comment">// 映射 this.count 为 store.state.count</span></span><br><span class="line">  <span class="string">'count'</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>如果你想将一个 getter 属性另取一个名字，使用对象形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mapGetters(&#123;</span><br><span class="line">  <span class="comment">// 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`</span></span><br><span class="line">  doneCount: <span class="string">'doneTodosCount'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>对象展开运算符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  localComputed () &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">  <span class="comment">// 使用对象展开运算符将此对象混入到外部对象中</span></span><br><span class="line">  ...mapState(&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;span @click=<span class="string">"invokePushItems(item)"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">methods:&#123;</span><br><span class="line">  ...mapActions(<span class="string">'collection'</span>,[ <span class="comment">//collection是指modules文件夹下的collection.js</span></span><br><span class="line">    <span class="string">'invokePushItems'</span>  <span class="comment">//collection.js文件中的actions里的方法，在上面的@click中执行并传入实参</span></span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">  <span class="comment">// 用mapState来获取collection.js里面的state的属性值</span></span><br><span class="line">  ...mapState(&#123;</span><br><span class="line">    arrList:<span class="function"><span class="params">state</span>=&gt;</span>state.collection.collects</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 用mapGetters来获取collection.js里面的getters</span></span><br><span class="line">  ...mapGetters(<span class="string">'collection'</span>,&#123;</span><br><span class="line">    arrList:<span class="string">'renderCollects'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Vuex&lt;/p&gt;
&lt;p&gt;专为 Vue.js 应用程序开发的&lt;strong&gt;状态管理模式&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;管理应用的所有组件的状态；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;集中式存储；&lt;/p&gt;
&lt;p&gt;以一个全局单例模式管理；&lt;/p&gt;
&lt;/blockquot
      
    
    </summary>
    
      <category term="web" scheme="http://gnbyj.cn/categories/web/"/>
    
    
      <category term="Vue" scheme="http://gnbyj.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>利用ajax上传文件</title>
    <link href="http://gnbyj.cn/2019/02/26/%5B2019-02-26%5D%E5%88%A9%E7%94%A8Ajax%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    <id>http://gnbyj.cn/2019/02/26/[2019-02-26]利用Ajax上传文件/</id>
    <published>2019-02-26T11:10:00.000Z</published>
    <updated>2019-02-27T07:09:58.978Z</updated>
    
    <content type="html"><![CDATA[<p>利用ajax上传文件，借助FormData对象</p><p>ajax异步上传页面不用重新刷新，体验更好</p><p><code>formData.append(&quot;myfile&quot;, document.getElementById(&quot;file1&quot;).files[0]);</code></p><p>之后通过XHR对象 send() 出去</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;file upload&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">""</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    &lt;p&gt;上传文件：&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input id="cont" type="file" placeholder="请选择文件"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;button onclick="UploadFile()"&gt;上传&lt;/</span>button&gt;</span><br><span class="line">    &lt;button onclick=<span class="string">"cancleUploadFile()"</span>&gt;取消&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>form&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">UploadFile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cont = <span class="built_in">document</span>.getElementById(<span class="string">"cont"</span>).files[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// FormData对象</span></span><br><span class="line">    <span class="keyword">var</span> form = <span class="keyword">new</span> FormData();</span><br><span class="line">    form.append(<span class="string">"file"</span>, cont);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> xhr;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</span><br><span class="line">        xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    xhr.onload = uploadComplete; <span class="comment">//请求完成</span></span><br><span class="line">    xhr.onerror =  uploadFailed; <span class="comment">//请求失败</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> url =  <span class="string">"http://localhost:8080"</span> + <span class="string">"/api/attachment/upload"</span>;</span><br><span class="line">    xhr.open(<span class="string">"POST"</span>, url, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// xhr.setRequestHeader("Content-type","application/x-www-form-urlencoded; charset=utf-8");</span></span><br><span class="line">    <span class="comment">// xhr.setRequestHeader("Content-type","application/json; charset=utf-8");</span></span><br><span class="line">    xhr.send(form);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//xhr.onreadystatechange = function()&#123;</span></span><br><span class="line">    <span class="comment">//if(xhr.readyState == 4 &amp;&amp; xhr.status == 200)&#123;</span></span><br><span class="line">    <span class="comment">//console.log(xhr.responseText);</span></span><br><span class="line">    <span class="comment">//console.log(xhr.responseXML);</span></span><br><span class="line">    <span class="comment">//console.log(xhr.statusText);</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上传成功响应</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadComplete</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//服务断接收完文件返回的结果</span></span><br><span class="line">    <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(evt.target.responseText);</span><br><span class="line">    <span class="keyword">if</span>(data.success) &#123;</span><br><span class="line">        alert(<span class="string">"上传成功！"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        alert(<span class="string">"上传失败！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//上传失败</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadFailed</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">"上传失败！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取消上传</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cancleUploadFile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    xhr.abort();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;利用ajax上传文件，借助FormData对象&lt;/p&gt;
&lt;p&gt;ajax异步上传页面不用重新刷新，体验更好&lt;/p&gt;
&lt;p&gt;&lt;code&gt;formData.append(&amp;quot;myfile&amp;quot;, document.getElementById(&amp;quot;file1
      
    
    </summary>
    
      <category term="web" scheme="http://gnbyj.cn/categories/web/"/>
    
    
      <category term="javascript" scheme="http://gnbyj.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Ajax</title>
    <link href="http://gnbyj.cn/2019/02/26/%5B2019-02-26%5DAjax/"/>
    <id>http://gnbyj.cn/2019/02/26/[2019-02-26]Ajax/</id>
    <published>2019-02-26T09:43:00.000Z</published>
    <updated>2019-02-27T07:19:01.309Z</updated>
    
    <content type="html"><![CDATA[<p>AJAX——Asynchronous JavaScript and XML</p><p>一种<strong>创建交互式网页应用的网页开发技术</strong></p><p>客户端与服务器，可以在【不刷新整个浏览器】的情况下，与服务器进行异步通讯</p><p>传统Web应用——<strong>Servlet通过转发把数据发送给浏览器</strong>，直发服务器</p><p>AJAX——<strong>服务器并不是以转发的方式响应，而是以流的方式把数据返回给浏览器</strong>，经过XHR封装</p><blockquote><p>XMLHttpRequest异步对象会不停监听服务器状态的变化，得到服务器返回的数据，就写到浏览器上。</p></blockquote><p>XMLHttpRequest使用JavaScript向服务器发送请求并处理响应，而不阻塞用户。通过XMLHttpRequest对象，可以在页面加载以后进行页面的局部更新。</p><p>流程：</p><ol><li>创建XMLHttpRequest对象，也就是创建一个异步调用对象.</li><li>创建一个新的HTTP请求，并指定该HTTP请求的方法、URL及验证信息.</li><li>设置响应HTTP请求状态变化的函数.</li><li>发送HTTP请求.</li><li>获取异步调用返回的数据.</li><li>使用JavaScript和DOM实现局部刷新.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr;</span><br><span class="line"><span class="comment">// 利用所有现代浏览器内部的对象-XMLHttpRequest-来实现发送和接收HTTP请求与响应信息。</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</span><br><span class="line">  <span class="comment">//IE7+,...</span></span><br><span class="line">  xhr=<span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="comment">//IE6,IE5</span></span><br><span class="line">  xhr=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用open(method,url,async) 方法准备好一个请求，async表示同步还是异步，默认为true(异步)；</span></span><br><span class="line">xhr.open(<span class="string">"POST"</span>,<span class="string">"/bank/rich.do"</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在调用open()方法后，XMLHttpRequest对象把它的readyState属性设置为1(打开)并且把responseText、responseXML、status和statusText属性复位到它们的初始值。另外，它还复位请求头部。</span></span><br><span class="line"><span class="comment">// 注意，如果你调用open()方法并且此时readyState为4，则XMLHttpRequest对象将复位这些值。</span></span><br><span class="line"><span class="comment">// 设置请求的头部信息，必须写在open和send中间</span></span><br><span class="line"><span class="comment">// 使用post方式才会使用到，get方法并不需要调用该方法</span></span><br><span class="line"><span class="comment">// 如果在send(data)方法中的data参数的类型为DOMString，那么，数据将被编码为UTF-8。</span></span><br><span class="line"><span class="comment">// 如果数据是Document类型，那么将使用由data.xmlEncoding指定的编码串行化该数据。</span></span><br><span class="line">xhr.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 仅当readyState值为1时，才可以调用send()方法；否则的话，XMLHttpRequest对象将引发一个异常。</span></span><br><span class="line"><span class="comment">// XMLHttpRequest对象的send()方法可以立即返回，从而让Web页面上的其它HTML/JavaScript继续其浏览器端处理而由服务器处理HTTP请求并发送响应。即Async</span></span><br><span class="line"><span class="comment">// 如果是get方式，并不需要填写参数，或填写null</span></span><br><span class="line"><span class="comment">// 如果是post方式，把要提交的参数写上去</span></span><br><span class="line">xhr.send(<span class="string">"name=王大锤&amp;sex=男"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在调用send()方法后，XMLHttpRequest对象把readyState的值设置为2(发送)。</span></span><br><span class="line"><span class="comment">// 当服务器响应时，在接收消息体之前，如果存在任何消息体的话，XMLHttpRequest对象将把readyState设置为3(正在接收中)。</span></span><br><span class="line"><span class="comment">// 当请求完成加载时，它把readyState设置为4(已加载)。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// xhr激发一个readystatechange事件，设置状态监听，指定回调函数</span></span><br><span class="line"><span class="comment">// getAllResponseHeader()：获取所有的响应报头。</span></span><br><span class="line"><span class="comment">// getResponseHeader()：查询响应中的某个字段的值。readyState==3|4时调用才有意义。</span></span><br><span class="line"><span class="comment">// abort()：暂停异步HTTP请求，复位到未初始化状态。</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// readyState属性：0/1/2/3/4, 描述对象的当前状态</span></span><br><span class="line">  <span class="comment">// 0："未初始化"状态，已经创建一个XMLHttpRequest对象，但是还没有初始化。</span></span><br><span class="line">  <span class="comment">// 1："发送"状态，open()已经调用，也准备好发送请求。</span></span><br><span class="line">  <span class="comment">// 2："发送"状态，已通过send()发送请求，但还没有收到一个响应。</span></span><br><span class="line">  <span class="comment">// 3："正在接收"状态，已经接收到HTTP响应头部信息，但是消息体部分还没有完全接收。</span></span><br><span class="line">  <span class="comment">// 4："已加载"状态，响应已经被完全接收。</span></span><br><span class="line">  <span class="comment">// status：以数字返回http状态码。</span></span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>)&#123;</span><br><span class="line">    <span class="comment">// statusText文本形式返回http状态码</span></span><br><span class="line">    xhr.statusText</span><br><span class="line">    <span class="comment">// responseText:获得字符串形式的相应数据(Content-Type)，完整的响应信息。</span></span><br><span class="line">    xhr.responseText</span><br><span class="line">    <span class="comment">// responseXML:获得XML形式的相应数据，否则为null。</span></span><br><span class="line">    xhr.responseXML</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何解决跨域问题?</p><p>同源策略</p><p>同源策略是客户端脚本（尤其是Javascript）的重要的安全度量标准。 所谓同源指的是：协议，域名，端口相同，<strong>同源策略是一种安全协议，指一段脚本只能读取来自同一来源的窗口和文档的属性</strong>。 </p><p><strong>协议、域名、端口都相同才同域，否则都是跨域</strong></p><p>出于安全考虑，服务器不允许ajax跨域获取数据，但是可以跨域获取文件内容。</p><ul><li>可以动态创建script标签，使用标签的src属性访问js文件的形式获取js脚本，并且这个js脚本中的内容是函数调用，该函数调用的参数是服务器返回的数据，为了获取这里的参数数据，需要事先在页面中定义回调函数，在回调函数中处理服务器返回的数据<strong>【JSONP】</strong></li><li>在后端上配置可跨域<strong>【CORS方式】</strong></li><li>前端ajax请求的是本地接口，本地接口接收到请求后向实际的接口请求数据，然后再将信息返回给前端<strong>【代理方式】</strong></li></ul><p>异步加载JS</p><ol><li>动态插入 script 标签</li><li>通过 ajax 去获取 js 代码，然后通过 eval 执行</li><li>script 标签上添加 defer 或者 async 属性</li><li>创建并插入 iframe，让它异步执行 js</li></ol><p>解决浏览器缓存</p><ul><li>在ajax发送请求前加上 <code>xhr.setRequestHeader(&quot;If-Modified-Since&quot;,&quot;0&quot;)</code></li><li>在ajax发送请求前加上 <code>xhr.setRequestHeader(&quot;Cache-Control&quot;,&quot;no-cache&quot;)</code></li><li>在URL后面加上一个随机数： <code>&quot;fresh=&quot; + Math.random()</code></li><li>在URL后面加上时间戳：<code>&quot;nowtime=&quot; + new Date().getTime();</code></li><li>如果是使用jQuery，直接这样就可以了 <code>$.ajaxSetup({cache:false})</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajaxSetup(&#123;</span><br><span class="line">    beforeSend:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//每次ajax请求前执行的操作;</span></span><br><span class="line">&#125;,</span><br><span class="line">    complete:<span class="function"><span class="keyword">function</span>(<span class="params">XMLHttpRequest,textStatus</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//判断cookie中存储cookie的时间是否临近超时时刻了</span></span><br><span class="line">        <span class="comment">//如果临近的话  发送刷新token的请求; 存储新的token并且记录当前时刻</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;AJAX——Asynchronous JavaScript and XML&lt;/p&gt;
&lt;p&gt;一种&lt;strong&gt;创建交互式网页应用的网页开发技术&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;客户端与服务器，可以在【不刷新整个浏览器】的情况下，与服务器进行异步通讯&lt;/p&gt;
&lt;p&gt;传统Web
      
    
    </summary>
    
      <category term="frontend" scheme="http://gnbyj.cn/categories/frontend/"/>
    
      <category term="web" scheme="http://gnbyj.cn/categories/frontend/web/"/>
    
    
      <category term="Ajax" scheme="http://gnbyj.cn/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>Vue</title>
    <link href="http://gnbyj.cn/2019/02/26/%5B2019-02-26%5DVue/"/>
    <id>http://gnbyj.cn/2019/02/26/[2019-02-26]Vue/</id>
    <published>2019-02-26T09:00:00.000Z</published>
    <updated>2019-02-28T10:00:05.310Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.im/post/59fa9257f265da43062a1b0e" target="_blank" rel="noopener">Vue 高频问题汇总</a></p><hr><h3 id="Vue的生命周期"><a href="#Vue的生命周期" class="headerlink" title="Vue的生命周期"></a>Vue的生命周期</h3><blockquote><p>从开始创建、初始化数据、编译模板、挂载Dom、渲染→更新→渲染、卸载等一系列过程。  </p></blockquote><h4 id="流程："><a href="#流程：" class="headerlink" title="流程："></a>流程：</h4><p>【创建】</p><ul><li>创建Vue空实例</li></ul><p>【初始化】</p><ul><li><code>init</code>过程中调用【<code>beforeCreate</code>】钩子函数；</li><li><p><code>init</code>完成之后，Vue实例被正式创建。【以上是默认操作】</p></li><li><p>调用【<code>created</code>】钩子函数，经行【自定义】的初始化操作；</p></li></ul><p>【编译模板】</p><ul><li><code>Has el option</code>/<code>Has template option</code></li><li>将data中的数据和模板编译生成render function</li><li>调用【<code>beforeMount</code>】钩子函数</li></ul><p>【挂载DOM】</p><ul><li>用 Virtual DOM 的<code>$el</code>替换掉<code>el</code>属性</li><li>调用【<code>mounted</code>】钩子函数，此时可以操作DOM</li></ul><p>【双向数据绑定】</p><ul><li>数据变化，此时会调用【<code>beforeUpdate</code>】钩子函数</li><li>Virtual DOM重新渲染并打补丁</li><li>页面更新后，调用【<code>updated</code>】钩子函数</li></ul><p>【销毁】</p><ul><li>触发vm.$destroy()后，调用【<code>beforeDestroy】</code>钩子函数</li><li>卸载watchers/子组件/事件监听</li><li>调用【<code>destroyed</code>】钩子函数</li><li>销毁Vue实例</li></ul><h4 id="白话复述："><a href="#白话复述：" class="headerlink" title="白话复述："></a>白话复述：</h4><blockquote><p>创建的对象一般都需要进行一系列初始化动作之后才可被使用；<br>自定义的初始化动作可以在<code>created</code>里定义，会被Vue调用执行；<br>初始化完成，将模板和数据结合在一起，编译成render函数，渲染出虚拟DOM；<br>将虚拟DOM挂载到el上，之后DOM操作可被使用，通过<code>mounted</code>钩子函数；<br>监听数据变化，重渲染页面（之前之后有两个钩子函数可供使用）；<br>销毁实例，卸载监听及子组件（之前之后有两个钩子函数可供使用）；</p></blockquote><h4 id="8个-4对-钩子函数："><a href="#8个-4对-钩子函数：" class="headerlink" title="8个/4对 钩子函数："></a>8个/4对 钩子函数：</h4><ul><li>实例创建阶段：【beforeCreate】/【created】</li><li>DOM挂载阶段：【beforeMount】/【mounted】</li><li>页面更新阶段：【beforeUpdate】/【updated】</li><li>实例销毁阶段：【beforeDestroy】/【destroyed】</li></ul><h4 id="虚拟DOM节点树"><a href="#虚拟DOM节点树" class="headerlink" title="虚拟DOM节点树"></a>虚拟DOM节点树</h4><p>Template –&gt; <code>compile</code> –&gt; render function –&gt; <code>render</code>  –&gt; 虚拟DOM Tree  –&gt; <code>create</code>  –&gt; 真实DOM</p><p><code>vdom</code>很好的将<code>dom</code>做了一层映射关系，将我们本需要直接操作<code>dom</code>的动作映射到了操作<code>vdom</code>，</p><p><code>vdom</code>上定义了关于真实<code>dom</code>的一些关键的信息，</p><p><code>vdom</code>完全是用<code>js</code>去实现，和宿主浏览器没有任何联系，</p><p><code>js</code>的执行速度快，操作<code>vdom</code>的效率和性能要比直接操作<code>dom</code>好很多。</p><hr><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 隐藏未编译的Mustache标签直到准备完毕</span><br><span class="line"><span class="selector-attr">[v-cloak]</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://juejin.im/post/59fa9257f265da43062a1b0e&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vue 高频问题汇总&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Vue的生命周期&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="web" scheme="http://gnbyj.cn/categories/web/"/>
    
    
      <category term="Vue" scheme="http://gnbyj.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>HTTP</title>
    <link href="http://gnbyj.cn/2019/02/26/%5B2019-02-26%5DHTTP%E5%8D%8F%E8%AE%AE/"/>
    <id>http://gnbyj.cn/2019/02/26/[2019-02-26]HTTP协议/</id>
    <published>2019-02-26T06:00:00.000Z</published>
    <updated>2019-02-26T09:41:20.312Z</updated>
    
    <content type="html"><![CDATA[<p>HyperText Transfer Protocol，超文本传输协议</p><p>基于TCP/IP通信协议  应用层协议 </p><p>C/S架构模型，支持B/S及C/S模式 </p><p>客户端发起<u>请求</u>，服务端作出<u>响应</u></p><p>http：80，https：443</p><blockquote><p>是无连接的——限制每次连接只处理一个请求，应答后即断开连接。</p><p>是媒体独立的——客户端以及服务器指定使用适合的MIME-type内容类型。 </p><p>是无状态的——对于事务处理没有记忆能力，服务器应答就快，信息重传。</p></blockquote><p>HTTP使用统一资源标识符（Uniform Resource Identifiers, <strong>URI</strong>）来传输数据和建立连接。 </p><p>协议部分(http:) + // +  域名部分 + “:” + 端口部分 + 虚拟目录部分(^\/*\/$) + 文件名部分(^\/*\?$) + 锚部分(#) + 参数部分(?params)</p><p>请求：</p><blockquote><p>请求行（request line）：请求方法+URL+协议版本</p><p>请求头部（header）：头部字段名：值</p><p>空行</p><p>请求数据 </p></blockquote><p>响应：</p><blockquote><p>状态行：协议版本+状态码+状态信息</p><p>消息报头</p><p>空行</p><p>响应正文</p></blockquote><p>GET——请求指定的页面信息，并返回实体主体<br>POST——向指定资源提交数据进行处理请求</p><p>GET和POST的区别</p><ol><li><p>GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditPosts.aspx?name=test1&amp;id=123456；POST方法是把提交的数据放在HTTP包的Body中。</p></li><li><p>GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制。</p></li><li><p>GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值。</p></li><li><p>GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码</p></li></ol><p>HTTP响应头信息：</p><p>Allow——服务器支持哪些请求方法</p><p>Content-Encoding——文档的编码（Encode）方法 </p><p>Accept-Encoding —— 是否支持gzip </p><p>Content-Type——内容类型，MIME类型</p><p>Last-Modified —— 文档的最后改动时间</p><p>Expires —— 应该在什么时候认为文档已经过期 </p><p>HTTP状态码：</p><table><thead><tr><th>状态码</th><th>en</th><th>cn</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>请求成功。一般用于GET与POST请求</td></tr><tr><td>301</td><td>Moved Permanently</td><td>永久移动， 浏览器会自动定向到新URI</td></tr><tr><td>302</td><td>Found</td><td>临时移动， 客户端应继续使用原有URI</td></tr><tr><td>304</td><td>Not Modified</td><td>未修改， 不会返回任何资源</td></tr><tr><td>307</td><td>Temporary Redirect</td><td>临时重定向， 使用GET请求重定向</td></tr><tr><td>404</td><td>Not Found</td><td>服务器无法根据客户端的请求找到资源</td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器内部错误，无法完成请求</td></tr></tbody></table><p>Content-Type</p><p>内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码</p><p>数据发送出去后，需要接收的服务端解析成功，一般服务端会根据content-type字段来获取参数是怎么编码的，然后对应去解码。 </p><p>参数都是通过浏览器的url传递，形式如<code>key=&amp;value=</code> , <code>Content-Type:application/x-www-form-urlencoded</code>；</p><p>1995年content-type扩充了<code>multipart/form-data，</code>，用以支持向服务器发送<strong>二进制</strong>数据，即<strong>文件上传</strong>；</p><p>后来随着web应用的增多，增加了诸如<code>application/json</code>的类型，告诉服务端消息主体是序列化的json字符串。 </p><p>请求头：</p><blockquote><p>Accept: text/javascript, application/javascript, application/ecmascript, application/x-ecmascript, <em>/</em>; q=0.01</p><p>Accept-Encoding: gzip, deflate, br</p><p>Accept-Language: zh-CN,zh;q=0.9</p><p>Connection: keep-alive</p><p>Cookie: BAIDUID=5E9C0A30BBD69B19823410F5F7D19CEB:FG=1; PSTM=1551056481; BIDUPSID=52D1C39C7B361613E19FB74BB6B54004; BD_UPN=12314753; ispeed_lsm=2; delPer=0; BD_HOME=0; H_PS_PSSID=1468_21117_28558_28415; BD_CK_SAM=1; PSINO=1; H_PS_645EC=895fkvxFXCrFRlZU9gh5ILQFSoJDjo5htE2G%2F2kKJ6PYRdCbRoUoY6TCHCc</p><p>Host: <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p><p>Referer: <a href="https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=0&amp;rsv_idx=1&amp;tn=baidu&amp;wd=content-type&amp;rsv_pq=e82fd81000073bed&amp;rsv_t=febcRU%2BTelFRV0MEnnta3HFttJFHqv1gWiqY2TM6SVR0oblSxSTdzQ5zvgc&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_sug3=13&amp;rsv_sug2=0&amp;inputT=3835&amp;rsv_sug4=5320" target="_blank" rel="noopener">https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=0&amp;rsv_idx=1&amp;tn=baidu&amp;wd=content-type&amp;rsv_pq=e82fd81000073bed&amp;rsv_t=febcRU%2BTelFRV0MEnnta3HFttJFHqv1gWiqY2TM6SVR0oblSxSTdzQ5zvgc&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_sug3=13&amp;rsv_sug2=0&amp;inputT=3835&amp;rsv_sug4=5320</a></p><p>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.96 Safari/537.36</p><p>X-Requested-With: XMLHttpRequest</p></blockquote><p>响应头：</p><blockquote><p>Cache-Control: private</p><p>Content-Encoding: gzip</p><p>Content-Length: 361</p><p>Content-Type: baiduApp/json; v6.27.2.14; charset=UTF-8</p><p>Date: Tue, 26 Feb 2019 07:19:45 GMT</p><p>Expires: Tue, 26 Feb 2019 08:19:45 GMT</p><p>Server: suggestion.baidu.zbb.df</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HyperText Transfer Protocol，超文本传输协议&lt;/p&gt;
&lt;p&gt;基于TCP/IP通信协议  应用层协议 &lt;/p&gt;
&lt;p&gt;C/S架构模型，支持B/S及C/S模式 &lt;/p&gt;
&lt;p&gt;客户端发起&lt;u&gt;请求&lt;/u&gt;，服务端作出&lt;u&gt;响应&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;h
      
    
    </summary>
    
      <category term="frontend" scheme="http://gnbyj.cn/categories/frontend/"/>
    
      <category term="web" scheme="http://gnbyj.cn/categories/frontend/web/"/>
    
    
      <category term="HTTP" scheme="http://gnbyj.cn/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Router</title>
    <link href="http://gnbyj.cn/2019/02/26/%5B2019-02-26%5DVue-Router/"/>
    <id>http://gnbyj.cn/2019/02/26/[2019-02-26]Vue-Router/</id>
    <published>2019-02-26T01:27:00.000Z</published>
    <updated>2019-02-27T01:10:54.353Z</updated>
    
    <content type="html"><![CDATA[<p>Vue + Vue-Router步骤：</p><ol><li><p>如果使用模块化机制编程，导入Vue和VueRouter，调用 Vue.use(VueRouter)；</p></li><li><p>定义 (路由) 组件，可以从其他文件import进来；</p></li><li><p>定义路由，每个路由映射一个组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Routers = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/index'</span>, <span class="comment">// 匹配路径</span></span><br><span class="line">        component: <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">'./views/index.vue'</span>], resolve) <span class="comment">// 映射组件</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/about'</span>,</span><br><span class="line">        component: <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">'./views/about.vue'</span>], resolve)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>require.ensure()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Province = <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.ensure([], () =&gt; r(<span class="built_in">require</span>(<span class="string">'@/components/Province.vue'</span>)), <span class="string">'chunkname1'</span>)</span><br><span class="line"><span class="keyword">const</span> Segment = <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.ensure([], () =&gt; r(<span class="built_in">require</span>(<span class="string">'@/components/Segment.vue'</span>)), <span class="string">'chunkname2'</span>)</span><br><span class="line"><span class="keyword">const</span> Loading = <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.ensure([], () =&gt; r(<span class="built_in">require</span>(<span class="string">'@/components/Loading.vue'</span>)), <span class="string">'chunkname3'</span>)</span><br><span class="line"><span class="keyword">const</span> User = <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.ensure([], () =&gt; r(<span class="built_in">require</span>(<span class="string">'@/components/User.vue'</span>)), <span class="string">'chunkname3'</span>)</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://blog.csdn.net/qq_27626333/article/details/76228578" target="_blank" rel="noopener">https://blog.csdn.net/qq_27626333/article/details/76228578</a></p></li></ol><ol start="4"><li><p>创建router实例，传入routes配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> RouterConfig = &#123;</span><br><span class="line">    mode: <span class="string">'history'</span>, <span class="comment">// 不配置mode，用 # 来设置路径</span></span><br><span class="line">    routes: Routes</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(RouterConfig)</span><br></pre></td></tr></table></figure><p>开启History路由，需将所有路由指向同一个html，webpack修改package.json文件，添加<code>--history-api-fallback</code></p></li></ol><ol start="5"><li><p>创建和挂载根实例，注入路由router</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">'#app'</span>,</span><br><span class="line">router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p><code>&lt;router-view/&gt;</code> 路由视图，用于挂载路由组件</p><p>跳转（2种方法）</p><p><code>&lt;router-link to=&quot;/index&quot;&gt;go to index&lt;/router-link&gt;</code>，被渲染未\&lt;a>标签</p><p>prop：tag/replace/active-class</p><p><code>this.$router.push()/replace()/go()</code></p><p>通过 <code>this.$router</code> 访问路由器，也可以通过 <code>this.$route</code> 访问当前路由</p><blockquote><p><strong>Vue 路由中 $route 和 $router 的区别</strong><br>$route是“路由信息“对象，包括path，params，hash，query，fullPath，matched，name等路由信息参数。<br>$router是“路由实例”对象，包括路由的跳转方法，钩子函数等。</p></blockquote><p>编程式导航</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span><br><span class="line">router.push(<span class="string">'home'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">'home'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名路由，在创建 Router 实例的时候，在 routes 配置中给某个路由设置名称name。</span></span><br><span class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">'user'</span>, <span class="attr">params</span>: &#123; <span class="attr">userId</span>: <span class="string">'123'</span> &#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带查询参数，变成 /register?plan=private</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">'register'</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">'private'</span> &#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果提供了 path，params 会被忽略</span></span><br></pre></td></tr></table></figure><p>导航守卫</p><p>全局前置守卫 <code>router.beforeEach((to, from, next)=&gt;{ //... })</code></p><p>全局解析守卫 <code>router.beforeResolve</code></p><p>全局后置守卫 <code>router.afterEach((to, from)=&gt;{ //... })</code></p><p><strong>路由</strong>独享的守卫 <code>beforeEnter: (to, from, next)=&gt;{ //... }</code></p><p><strong>组件</strong>内守卫 <code>beforeRouteEnter(to, from, next){ //... }</code>不能访问this，可<code>next(vm =&gt; { //vm访问组件实例 })</code></p><p><code>beforeRouteUpdate(to, from, next){ //... }</code></p><p><code>beforeRouteLeave(to, from, next){ //... }</code></p><blockquote><p>to: 即将进入的目标路由对象</p><p>from: 当前导航即将要离开的路由对象</p><p>next: 调用后才会进入下一个钩子</p></blockquote><p>改变标题，用到<code>router.beforeEach((to, from, next) =&gt; {var title = to.meta.title; next();})</code></p><p>设置滚动条位置，<code>window.scrollTo(0,0)</code></p><p>校验是否登录，已登录调用<code>next()</code>，未登录<code>next(&#39;\login&#39;)</code>或<code>next(false)</code></p><p>完整的导航解析流程</p><ol><li>导航被触发。</li><li>在失活的组件里调用离开守卫。</li><li>调用全局的 <code>beforeEach</code> 守卫。</li><li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫 (2.2+)。</li><li>在路由配置里调用 <code>beforeEnter</code>。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 <code>beforeRouteEnter</code>。</li><li>调用全局的 <code>beforeResolve</code> 守卫 (2.5+)。</li><li>导航被确认。</li><li>调用全局的 <code>afterEach</code> 钩子。</li><li>触发 DOM 更新。</li><li>用创建好的实例调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Vue + Vue-Router步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;如果使用模块化机制编程，导入Vue和VueRouter，调用 Vue.use(VueRouter)；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定义 (路由) 组件，可以从其他文件import进来；&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="frontend" scheme="http://gnbyj.cn/categories/frontend/"/>
    
      <category term="web" scheme="http://gnbyj.cn/categories/frontend/web/"/>
    
    
      <category term="Vue" scheme="http://gnbyj.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Windows解决端口占用问题</title>
    <link href="http://gnbyj.cn/2019/02/26/%5B2019-02-26%5DWindows%E7%B3%BB%E7%BB%9F%E8%A7%A3%E5%86%B3%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8/"/>
    <id>http://gnbyj.cn/2019/02/26/[2019-02-26]Windows系统解决端口被占用/</id>
    <published>2019-02-26T01:10:00.000Z</published>
    <updated>2019-02-26T01:12:27.247Z</updated>
    
    <content type="html"><![CDATA[<ol><li>在dos下，输入<code>netstat -ano|findstr [port]</code>,查看端口使用情况</li><li>输入 <code>taskkill /pid [pid] /f</code> 停止端口占用</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;在dos下，输入&lt;code&gt;netstat -ano|findstr [port]&lt;/code&gt;,查看端口使用情况&lt;/li&gt;
&lt;li&gt;输入 &lt;code&gt;taskkill /pid [pid] /f&lt;/code&gt; 停止端口占用&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
      <category term="common" scheme="http://gnbyj.cn/categories/common/"/>
    
    
      <category term="web" scheme="http://gnbyj.cn/tags/web/"/>
    
      <category term="system" scheme="http://gnbyj.cn/tags/system/"/>
    
      <category term="port" scheme="http://gnbyj.cn/tags/port/"/>
    
  </entry>
  
  <entry>
    <title>Vue组件</title>
    <link href="http://gnbyj.cn/2019/02/26/%5B2019-02-26%5DVue%E7%BB%84%E4%BB%B6/"/>
    <id>http://gnbyj.cn/2019/02/26/[2019-02-26]Vue组件/</id>
    <published>2019-02-26T01:10:00.000Z</published>
    <updated>2019-02-26T16:06:43.357Z</updated>
    
    <content type="html"><![CDATA[<p>……</p><p>Vue组件传值形式：</p><ul><li>父子组件通信</li><li>兄弟组件通信</li><li>跨级组件通信</li></ul><ol><li><p>params</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// params传值 命名的路由</span></span><br><span class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">'user'</span>, <span class="attr">params</span>: &#123; <span class="attr">userId</span>: <span class="string">'123'</span> &#125;&#125;)</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>query</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// query传值 带查询参数，变成 /register?plan=private</span></span><br><span class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">'register'</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">'private'</span> &#125;&#125;)</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>props 父级 -&gt; 子级</p><p><code>v-bind:data</code></p><p>props：字符串数组形式/对象形式</p><p>对象形式，可对传入数据验证类型type，默认值default，是否必输required</p></li></ol><ol start="4"><li><p>$emit 父级监听子级触发的自定义事件</p><p>子组件<code>$emit()</code> 父组件<code>v-on:事件</code></p></li></ol><ol start="5"><li><p>bus中央总线</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bus = <span class="keyword">new</span> Vue();</span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">'m-com'</span>,&#123;</span><br><span class="line">    method: &#123;</span><br><span class="line">        xxx: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        bus.$emit(<span class="string">'msg'</span>,<span class="string">''</span>);   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    mounted: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        bus.$on(<span class="string">'msg'</span>,cb())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li><p>$refs 子组件索引</p><p>在子组件上设置属性<code>ref=&quot;comA&quot;</code></p><p>在实例方法属性中：通过 <code>$refs</code> 来访问指定的实例</p><blockquote><p><code>$refs</code> 只在组件渲染完成后才填充，应当避免在模板或计算属性中使用</p></blockquote></li></ol><ol start="7"><li><p>父链 (不推荐使用)</p><p><code>this.$parent</code>: 可以直接访问该组件的父实例或组件</p><p><code>this.$children</code>: 父组件访问它所有的子组件</p></li></ol><ol start="8"><li>vuex</li></ol><hr><p>slot 内容分发</p><p>作用域：</p><p>父组件模板的内容是在父组件作用域内编译；</p><p>子组件模板的内容是在子组件作用域内编译。</p><blockquote><p>slot分发的内容，作用域是在父组件上。</p></blockquote><p>用法：</p><p>在子组件内使用特殊的\&lt;slot>元素为子组件开启一个slot插槽，</p><p>在父组件模板里的内容将替代子组件slot标签及其内容。</p><p>具名slot</p><p>在父组件内容中添加类似属性<code>slot=&quot;header&quot;</code></p><p>在子组件<code>template</code>中定义<code>&lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</code></p><p>作用域插槽</p><p>父组件定义 <code>scope=&quot;props&quot;</code>，通过临时变量props访问子组件数据<code>props.bookName</code></p><p>子组件slot上对外暴露变量<code>&lt;slot :book-name=&quot;book.name&quot;&gt;</code></p><blockquote><p>$slot 访问某个具名slot</p></blockquote><blockquote><p>$nextTick(callback()) 就是用来知道什么时候DOM更新完成的</p></blockquote><p><code>Vue.extend({ // 组件选项 })</code> 基础Vue构造器，创造一个“子类”。</p><p><code>$mount()</code>手动挂载一个未挂载的实例</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;……&lt;/p&gt;
&lt;p&gt;Vue组件传值形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;父子组件通信&lt;/li&gt;
&lt;li&gt;兄弟组件通信&lt;/li&gt;
&lt;li&gt;跨级组件通信&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;params&lt;/p&gt;
&lt;figure class=&quot;highlight javas
      
    
    </summary>
    
      <category term="web" scheme="http://gnbyj.cn/categories/web/"/>
    
    
      <category term="Vue，web" scheme="http://gnbyj.cn/tags/Vue%EF%BC%8Cweb/"/>
    
  </entry>
  
  <entry>
    <title>响应式布局设计</title>
    <link href="http://gnbyj.cn/2019/02/21/%5B2019-02-21%5D%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80%E8%AE%BE%E8%AE%A1/"/>
    <id>http://gnbyj.cn/2019/02/21/[2019-02-21]响应式布局设计/</id>
    <published>2019-02-21T04:30:00.000Z</published>
    <updated>2019-02-22T01:25:58.886Z</updated>
    
    <content type="html"><![CDATA[<p>响应式布局设计步骤：</p><ol><li><p>设置meta标签，禁止页面缩放</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过媒介查询设置样式</p><p>根据条件告诉浏览器如何渲染页面</p><p>在link中使用@media</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"1.css"</span> <span class="attr">media</span>=<span class="string">"screen and (min-width:1000px)"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在样式表中内嵌@media</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (max-width:<span class="number">980px</span>) &#123;</span><br><span class="line">    <span class="selector-id">#head</span> &#123; <span class="attribute">width</span>: <span class="number">100%</span> &#125;</span><br><span class="line"><span class="selector-id">#content</span> &#123; <span class="attribute">width</span>: <span class="number">50%</span>; &#125;</span><br><span class="line"><span class="comment">/* 图片超过了，就缩小。假如图片小了，就原尺寸输出。 */</span></span><br><span class="line"><span class="selector-tag">img</span> &#123; <span class="attribute">width</span>: auto; <span class="attribute">max-width</span>: <span class="number">100%</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置多种视图宽度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* iPad */</span></span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">768px</span>) and (max-width: <span class="number">1024px</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* iPhone */</span></span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">320px</span>) and (max-width: <span class="number">767px</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;响应式布局设计步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;设置meta标签，禁止页面缩放&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/sp
      
    
    </summary>
    
      <category term="frontend" scheme="http://gnbyj.cn/categories/frontend/"/>
    
    
      <category term="web" scheme="http://gnbyj.cn/tags/web/"/>
    
  </entry>
  
</feed>
